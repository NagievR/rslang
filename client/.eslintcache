[{"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\index.js":"1","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\App.js":"2","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\loginRegistration.js":"3","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\notFound.js":"4","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\main.js":"5","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\header.js":"6","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\AboutTeam\\AboutTeam.js":"7","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\context\\context.js":"8","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\reducer\\reducer.js":"9","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\Header.js":"10","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\LoginRegistration.js":"11","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\Main.js":"12","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\NotFound.js":"13","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\eBook\\EBook.js":"14","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\dictionary\\Dictionary.js":"15","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\gamesMain.js":"16","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\footer\\footer.js":"17","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\aboutApp\\aboutApp.js":"18","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\routes\\start\\start.js":"19","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\routes\\savanna-g1\\index.js":"20","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\routes\\sprint\\SprintGame.js":"21"},{"size":302,"mtime":1617549485761,"results":"22","hashOfConfig":"23"},{"size":1836,"mtime":1617549732518,"results":"24","hashOfConfig":"23"},{"size":1352,"mtime":1617336666502,"results":"25","hashOfConfig":"23"},{"size":532,"mtime":1617336687027,"results":"26","hashOfConfig":"23"},{"size":1556,"mtime":1617336677191,"results":"27","hashOfConfig":"23"},{"size":1688,"mtime":1617457910428,"results":"28","hashOfConfig":"23"},{"size":2766,"mtime":1617551400347,"results":"29","hashOfConfig":"23"},{"size":109,"mtime":1617457910338,"results":"30","hashOfConfig":"23"},{"size":37317,"mtime":1618420320779,"results":"31","hashOfConfig":"23"},{"size":1804,"mtime":1617549704052,"results":"32","hashOfConfig":"23"},{"size":1352,"mtime":1617336666502,"results":"33","hashOfConfig":"23"},{"size":1556,"mtime":1617336677191,"results":"34","hashOfConfig":"23"},{"size":532,"mtime":1617336687027,"results":"35","hashOfConfig":"23"},{"size":18524,"mtime":1618420594526,"results":"36","hashOfConfig":"23"},{"size":18305,"mtime":1618327248737,"results":"37","hashOfConfig":"23"},{"size":702,"mtime":1618370443179,"results":"38","hashOfConfig":"23"},{"size":1579,"mtime":1617553877701,"results":"39","hashOfConfig":"23"},{"size":2693,"mtime":1617549485320,"results":"40","hashOfConfig":"23"},{"size":2795,"mtime":1618370111812,"results":"41","hashOfConfig":"23"},{"size":5180,"mtime":1617549485368,"results":"42","hashOfConfig":"23"},{"size":17046,"mtime":1618418371849,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1i7brp4",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\index.js",[],["93","94"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\App.js",["95"],"import React from \"react\";\r\nimport {\r\n  useLocation,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\nimport AboutApp from \"./components/aboutApp/aboutApp\";\r\nimport Footer from \"./components/footer/footer\";\r\nimport GamesMain from \"./components/games/gamesMain\";\r\nimport AboutTeam from \"./components/AboutTeam/AboutTeam\";\r\nimport Header from \"./components/header/Header\";\r\nimport LoginRegister from \"./components/loginRegister/LoginRegistration\";\r\nimport Main from \"./components/main/Main\";\r\nimport NotFound from \"./components/notFound/NotFound\";\r\nimport RSLangContext from \"./components/context/context\";\r\nimport { defaultState, reducer } from \"./components/reducer/reducer\";\r\nimport EBook from \"./components/eBook/EBook\";\r\nimport Dictionary from \"./components/dictionary/Dictionary\";\r\n\r\nfunction App() {\r\n  const [state, dispatch] = React.useReducer(reducer, defaultState);\r\n\r\n  return (\r\n    <RSLangContext.Provider value={{ ...state, dispatch }}>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/404\" component={NotFound} />\r\n          <Route path=\"/registration\" component={LoginRegister} />\r\n          <Route>\r\n            <Header />\r\n            <Switch>\r\n              <Route path=\"/\" exact component={Main} />\r\n              <Route path=\"/AboutTeam\" component={AboutTeam} />\r\n              <Route path=\"/AboutApp\" component={AboutApp} />\r\n              <Route path=\"/games\" component={GamesMain} />\r\n              <Route path=\"/eBook\" component={EBook} />\r\n              <Route path=\"/dictionary\" component={Dictionary} />\r\n              <Route render={() => <Redirect to=\"/404\" />} />\r\n            </Switch>\r\n            <Footer />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </RSLangContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\loginRegistration.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\notFound.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\main.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\header.js",["96"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\AboutTeam\\AboutTeam.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\context\\context.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\reducer\\reducer.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\Header.js",["97"],"import { useHistory } from \"react-router-dom\";\r\n\r\nimport s from \"./style.module.css\";\r\n\r\nconst Header = ({ title, descr }) => {\r\n  const history = useHistory();\r\n\r\n  const handleLogin = () => {\r\n    history.push(\"/registration\");\r\n  };\r\n\r\n  const handleLinkNavigation = (e, link) => {\r\n    e.preventDefault();\r\n\r\n    if (link === links[0]) history.push(\"/\");\r\n    if (link === links[1]) history.push(\"/games\");\r\n    if (link === links[3]) history.push(\"/eBook\");\r\n    if (link === links[6]) history.push(\"/dictionary\");\r\n    if (link === links[5]) history.push(\"/AboutTeam\");\r\n  };\r\n\r\n  const links = [\r\n    \"Главная\",\r\n    \"Мини-игры\",\r\n    \"Статистика\",\r\n    \"Электронный Учебник\",\r\n    \"О приложении\",\r\n    \"О команде\",\r\n    \"Словарь\",\r\n  ];\r\n  return (\r\n    <>\r\n      <header className={s.root}>\r\n        <nav className={s.nav}>\r\n          <ul>\r\n            {links.map((link, id) => {\r\n              return (\r\n                <li key={id} className={s.nav_list}>\r\n                  <a\r\n                    href=\"#\"\r\n                    className={s.nav_links}\r\n                    onClick={(e) => {\r\n                      handleLinkNavigation(e, link);\r\n                    }}\r\n                  >\r\n                    {link}\r\n                  </a>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <button\r\n            onClick={() => {\r\n              handleLogin();\r\n            }}\r\n            className={s.login_button}\r\n          >\r\n            Зайти в кабинет\r\n          </button>\r\n        </nav>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\LoginRegistration.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\Main.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\NotFound.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\eBook\\EBook.js",["98","99","100","101","102","103"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\dictionary\\Dictionary.js",["104","105","106","107","108","109"],"import React from \"react\";\r\nimport styles from \"./dictionary.module.css\";\r\nimport RSLangContext from \"../context/context\";\r\nimport soundImage from \"../../assets/sound.png\";\r\nimport saveImage from \"../../assets/floppy-disk.png\";\r\nimport deleteImage from \"../../assets/trash.png\";\r\nimport leftArrowImage from \"../../assets/left-arrow.png\";\r\nimport rightArrowImage from \"../../assets/right-arrow.png\";\r\nimport settingsImage from \"../../assets/settings.png\";\r\nimport undoImage from \"../../assets/undo.png\";\r\nfunction Dictionary() {\r\n  const {\r\n    currentSection,\r\n    dispatch,\r\n    savedWords,\r\n    deletedWords,\r\n    learningWords,\r\n    showWordTranslationAndTranslatedExampleSentence,\r\n    numberOfLearningWordsPages,\r\n    numberOfDeletedWordsPages,\r\n    numberOfSavedWordsPages,\r\n    dictionaryInfo,\r\n  } = React.useContext(RSLangContext);\r\n  return (\r\n    <div className={styles.dictionary}>\r\n      <div className={styles.wordList}>\r\n        <div className={styles.navigation}>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"learning_words\"\r\n                      ? styles.activeButton\r\n                      : \"\"\r\n                  }\r\n                  id=\"learning_words\"\r\n                >\r\n                  Изучаемые Слова\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"difficult_words\"\r\n                      ? styles.activeButton\r\n                      : \"\"\r\n                  }\r\n                  id=\"difficult_words\"\r\n                >\r\n                  Сложные Слова\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection == \"deleted_words\" ? styles.activeButton : \"\"\r\n                  }\r\n                  id=\"deleted_words\"\r\n                >\r\n                  Удаленные Слова\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n        {currentSection === \"learning_words\"\r\n          ? learningWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        {!word.isDeletedWord ? (\r\n                          <button\r\n                            style={{\r\n                              width: \"30px\",\r\n                              height: \"20px\",\r\n                              backgroundColor: \"inherit\",\r\n                            }}\r\n                            onClick={() => {\r\n                              dispatch({\r\n                                type: \"TOGGLE_SAVED_WORD\",\r\n                                payload: word.id,\r\n                              });\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src={saveImage}\r\n                              alt=\"\"\r\n                              style={{ width: \"100%\", height: \"100%\" }}\r\n                            />\r\n                          </button>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        <button\r\n                          style={{\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: `${\r\n                                word.isDeletedWord\r\n                                  ? \"RETURN_WORD\"\r\n                                  : \"REMOVE_FROM_LEARNING_WORDS\"\r\n                              }`,\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img src={undoImage} alt=\"\" />\r\n                        </button>\r\n                      </p>\r\n                      <p className={styles.section}> Раздел {word.group}</p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : currentSection === \"difficult_words\"\r\n          ? savedWords\r\n              .slice(\r\n                dictionaryInfo.savedWordsStart,\r\n                dictionaryInfo.savedWordsStop\r\n              )\r\n              .map((word) => {\r\n                const audio = new Audio(`${word.audio}`);\r\n                const audioExample = new Audio(`${word.audioExample}`);\r\n                const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n                return (\r\n                  <div\r\n                    className={`${styles.word} ${\r\n                      word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                    }`}\r\n                    key={word.id}\r\n                  >\r\n                    <div className={styles.image}>\r\n                      <img src={word.image} alt=\"image\" />\r\n                    </div>\r\n                    <div className={styles.wordInfo}>\r\n                      <div className={styles.wordInfoFirstRow}>\r\n                        <p className={styles.wordTitle}>{word.word}</p>\r\n                        <p className={styles.wordTranscription}>\r\n                          {word.transcription}\r\n                        </p>\r\n                        <p>\r\n                          <button\r\n                            style={{\r\n                              width: \"30px\",\r\n                              height: \"20px\",\r\n                              backgroundColor: \"inherit\",\r\n                            }}\r\n                            onClick={() => {\r\n                              audio.play();\r\n                              setTimeout(() => {\r\n                                audioMeaning.play();\r\n                              }, audio.duration * 1000 + 500);\r\n                              setTimeout(() => {\r\n                                audioExample.play();\r\n                              }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src={soundImage}\r\n                              alt=\"\"\r\n                              style={{ width: \"100%\", height: \"100%\" }}\r\n                            />\r\n                          </button>\r\n                          <button\r\n                            style={{\r\n                              width: \"30px\",\r\n                              height: \"20px\",\r\n                              backgroundColor: \"inherit\",\r\n                            }}\r\n                            onClick={() => {\r\n                              dispatch({\r\n                                type: \"TOGGLE_SAVED_WORD\",\r\n                                payload: word.id,\r\n                              });\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src={saveImage}\r\n                              alt=\"\"\r\n                              style={{ width: \"100%\", height: \"100%\" }}\r\n                            />\r\n                          </button>\r\n                        </p>\r\n                        <p className={styles.section}>\r\n                          {\" \"}\r\n                          Раздел {word.group + 1}\r\n                        </p>\r\n                      </div>\r\n                      <p style={{ fontWeight: \"bold\" }}>\r\n                        {showWordTranslationAndTranslatedExampleSentence\r\n                          ? word.wordTranslate\r\n                          : \"\"}\r\n                      </p>\r\n                      <p\r\n                        dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                      ></p>\r\n                      {showWordTranslationAndTranslatedExampleSentence ? (\r\n                        <p>{word.textMeaningTranslate}</p>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      <p\r\n                        dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                        style={{ fontStyle: \"italic\" }}\r\n                      ></p>\r\n                      <p>\r\n                        {showWordTranslationAndTranslatedExampleSentence\r\n                          ? word.textExampleTranslate\r\n                          : \"\"}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })\r\n          : currentSection === \"deleted_words\"\r\n          ? deletedWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        <button\r\n                          style={{\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"RETURN_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img src={undoImage} alt=\"\" />\r\n                        </button>\r\n                      </p>\r\n                      <p className={styles.section}> Раздел {word.group}</p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : \"\"}\r\n        <div className={styles.bottom}>\r\n          <h3>\r\n            {currentSection === \"learning_words\"}\r\n            {currentSection === \"learning_words\" && learningWords.length !== 0\r\n              ? `Номер Страницы : ${numberOfLearningWordsPages}`\r\n              : currentSection === \"difficult_words\" && savedWords.length !== 0\r\n              ? `Номер Страницы : ${numberOfSavedWordsPages}`\r\n              : currentSection === \"deleted_words\" && deletedWords.length !== 0\r\n              ? `Номер Страницы : ${numberOfDeletedWordsPages}`\r\n              : \"Вы еще не добавили слов в текущий раздел вашего словаря .\"}\r\n          </h3>\r\n          <button\r\n            style={{\r\n              width: \"40px\",\r\n              height: \"30px\",\r\n              backgroundColor: \"inherit\",\r\n            }}\r\n            onClick={() => {\r\n              dispatch({\r\n                type: `${\r\n                  currentSection === \"difficult_words\"\r\n                    ? \"DECREASE_SAVED_WORDS_PAGE\"\r\n                    : currentSection === \"learning_words\"\r\n                    ? \"DECREASE_LEARNING_WORDS_PAGE\"\r\n                    : currentSection === \"deleted_words\"\r\n                    ? \"DECREASE_DELETED_WORDS_PAGE\"\r\n                    : \"\"\r\n                }`,\r\n              });\r\n            }}\r\n          >\r\n            <img\r\n              src={leftArrowImage}\r\n              alt=\"left-arrow-icon\"\r\n              style={{ width: \"100%\", height: \"100%\" }}\r\n            />\r\n          </button>\r\n          <button\r\n            style={{\r\n              width: \"40px\",\r\n              height: \"30px\",\r\n              backgroundColor: \"inherit\",\r\n            }}\r\n            onClick={() => {\r\n              dispatch({\r\n                type: `${\r\n                  currentSection === \"difficult_words\"\r\n                    ? \"INCREASE_SAVED_WORDS_PAGE\"\r\n                    : currentSection === \"learning_words\"\r\n                    ? \"INCREASE_LEARNING_WORDS_PAGE\"\r\n                    : currentSection === \"deleted_words\"\r\n                    ? \"INCREASE_DELETED_WORDS_PAGE\"\r\n                    : \"\"\r\n                }`,\r\n              });\r\n            }}\r\n          >\r\n            <img\r\n              src={rightArrowImage}\r\n              alt=\"right-arrow-icon\"\r\n              style={{ width: \"100%\", height: \"100%\" }}\r\n            />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dictionary;\r\n","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\gamesMain.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\footer\\footer.js",["110","111"],"import s from \"./style.module.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <>\r\n      <footer className={s.root}>\r\n        <div className={s.container}>\r\n          <div className={s.logo_block}>\r\n            <a\r\n              href=\"https://rs.school/\"\r\n              className={s.logo_link}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            ></a>\r\n            <div className={s.RS_link_block}>\r\n              <div className={s.line} />\r\n              <div className={s.cursor} />\r\n              <a\r\n                href=\"https://rs.school/\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                className={s.RS_link}\r\n              >\r\n                rs.school\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div className={s.git_links_copyright}>\r\n            <div className={s.git_link}>\r\n              <a\r\n                href=\"https://github.com/AlekRing\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n              >\r\n                @AlekRing\r\n              </a>\r\n              <a href=\"/\" target=\"_blank\">\r\n                @fdgfh\r\n              </a>\r\n              <a href=\"https://github.com/moonbek007\" target=\"_blank\">\r\n                @moonbek007\r\n              </a>\r\n              <a href=\"/\" target=\"_blank\">\r\n                @p[cfklgb[p\r\n              </a>\r\n            </div>\r\n            <div className={s.line} />\r\n            <div className={s.year}>2021</div>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\aboutApp\\aboutApp.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\routes\\start\\start.js",["112"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\routes\\savanna-g1\\index.js",["113","114","115","116","117","118"],"import s from './style.module.css';\r\n\r\nimport ReactDOM from 'react-dom'\r\nimport WORDS from '../../../../data/words.json'\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst Savanna = () => {\r\n\r\n    const [wordsIndex, setWordsIndex] = useState([])\r\n    const [translatedWord, setTranslatedWord] = useState(['','','',''])\r\n    const [wordToTranslate, setWordToTranslate] = useState({})\r\n    const [gameLevel, setGameLevel] = useState(1)\r\n\r\n    //game parametres\r\n    const [score, setScore] = useState(0)\r\n    const [top, setTop] = useState(0)\r\n    const [lifesLeft, setLifesLeft] = useState(7)\r\n\r\n    const findWords = async () => {\r\n        const gameWords = []\r\n\r\n        // random index to choose word wich player gona translate\r\n        const wordToTranslateIndex = Math.floor(Math.random() * 4)\r\n\r\n        for (let i = 0; i < 4; i ++) {\r\n            let safeIndexesArr = await checkedIndex(i)\r\n\r\n            if (i === wordToTranslateIndex) {\r\n                const newWord = {\r\n                        word: WORDS[safeIndexesArr].word,\r\n                        translation: WORDS[safeIndexesArr].wordTranslate\r\n                    }\r\n\r\n                setWordToTranslate(newWord)\r\n            }\r\n\r\n            gameWords.push(WORDS[safeIndexesArr].wordTranslate)\r\n        }\r\n\r\n        // console.log(translatedWord, wordsIndex, wordToTranslate)\r\n\r\n        setTranslatedWord(prevState => {\r\n                return (\r\n                    prevState.map((w, ind) => {\r\n                        return  gameWords[ind]\r\n                    })\r\n                )\r\n            })\r\n    }\r\n         \r\n    const checkedIndex = async (i) => {\r\n        const uncheckedIndex = getRandUncheckedIndex()\r\n\r\n        const checkedI = await checkIfIndexUsed(uncheckedIndex)\r\n\r\n        setWordsIndex((prevState) => {\r\n            prevState.push(checkedI)\r\n\r\n            return prevState\r\n        })\r\n    \r\n        return wordsIndex[wordsIndex.length - 1]\r\n    }\r\n\r\n    const getRandUncheckedIndex = () => {\r\n        return (Math.floor(Math.random() * 3600))\r\n    }\r\n\r\n    const checkIfIndexUsed = (index) => {\r\n        let tempI = index\r\n\r\n        while (wordsIndex.includes(tempI)) {\r\n            tempI = getRandUncheckedIndex()\r\n        }\r\n        return tempI\r\n    }\r\n\r\n    const checkAnswer = (w) => {\r\n        if (w === wordToTranslate.translation) {\r\n            findWords()\r\n            setScore(prevState => prevState + 83)\r\n            falling('reset')\r\n        } else {\r\n            setLifesLeft(prevState => prevState - 1)\r\n            minusHeart()\r\n        }\r\n        console.log(lifesLeft)\r\n    }\r\n\r\n    const falling = (reset) => {\r\n        if (reset === 'gameOver') {\r\n            setTop(0)\r\n            return\r\n        }\r\n        const t = setInterval(() => {\r\n            setTop(p => p+1)\r\n        }, 6)\r\n        if (reset === 'reset') {\r\n            clearInterval(t)\r\n            setTop(0)\r\n        }\r\n    }\r\n\r\n    const minusHeart = () => {\r\n        let lifes = document.getElementById(s.lifes).textContent.split('')\r\n        lifes.pop()\r\n        lifes = lifes.join('')\r\n        document.getElementById(s.lifes).textContent = lifes\r\n    }\r\n\r\n    const gameOver = () => {\r\n        falling('gameOver')\r\n    }\r\n\r\n    useEffect(()=> {\r\n        findWords()\r\n        falling()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const gameWindowHeight = document.getElementById(s.game).clientHeight\r\n\r\n        if (top >= gameWindowHeight) {\r\n            setLifesLeft(prevState => prevState - 1)\r\n            minusHeart()\r\n            findWords()\r\n            falling('reset')\r\n            console.log(lifesLeft)\r\n        }\r\n    }, [top])\r\n\r\n    useEffect(()=> {\r\n        if (lifesLeft === 0) {\r\n            console.log('GameOVER')\r\n            gameOver()\r\n        }\r\n    }, [lifesLeft])\r\n\r\n    return (\r\n        <>\r\n            <div className={s.game_wrapper}>\r\n               <div className={s.game} id={s.game}>\r\n                    <div \r\n                        className={`${s.word_translate}`}\r\n                        style={{top: `${top}px`}}\r\n                    >\r\n                        {wordToTranslate.word}\r\n                    </div>\r\n                    <div className={s.game_sats}>\r\n                        <div className={s.lifes} id={s.lifes}>\r\n                            {'❤❤❤❤❤❤❤'}\r\n                        </div>\r\n                        <div className={s.score}>\r\n                            {score}\r\n                        </div>\r\n                    </div>\r\n                   {\r\n                       translatedWord.map((w,id) => {\r\n                           return (\r\n                               <div \r\n                                    key={id} \r\n                                    className={s.word}\r\n                                    onClick={()=>{\r\n                                        checkAnswer(w)\r\n                                    }}\r\n                                >\r\n                                   {w}\r\n                               </div>\r\n                           )\r\n                       })\r\n                   }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Savanna;","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\routes\\sprint\\SprintGame.js",["119","120","121"],"import React from \"react\";\r\nimport styles from \"./sprint.module.css\";\r\nimport RSLangContext from \"../../../context/context\";\r\nimport soundImage from \"../../../../assets/sound.png\";\r\nimport tickImage from \"../../../../assets/check.png\";\r\nfunction SprintGame() {\r\n  const { statistics, dispatch, gameInfo } = React.useContext(RSLangContext);\r\n  const { sprint } = statistics;\r\n  const [foundWords, setFoundWords] = React.useState([]);\r\n  const [failedWords, setFailedWords] = React.useState([]);\r\n  const [score, setScore] = React.useState(0);\r\n  const [points, setPoints] = React.useState(10);\r\n  const [numberOfLights, setNumberOfLights] = React.useState([0, 0, 0]);\r\n  const [birds, setBirds] = React.useState([1, 0, 0, 0]);\r\n  const [stageSuccessInARow, setStageSuccesInARow] = React.useState(0);\r\n  const [word, setWord] = React.useState(\"\");\r\n  const [translation, setTranslation] = React.useState(\"\");\r\n  const [showCorrectTranslation, setShowCorrectTranslation] = React.useState(\r\n    true\r\n  );\r\n  const [foundCorrectInARow, setFoundCorrectInARow] = React.useState(0);\r\n  const [next, setNext] = React.useState(0);\r\n  const [countDown, setCountDown] = React.useState(60);\r\n  const [isPlaying, setIsPlaying] = React.useState(true);\r\n  const [showLevels, setShowLevels] = React.useState(gameInfo.showLevels);\r\n  const [level, setLevel] = React.useState(gameInfo.wordGroup);\r\n  const [page, setPage] = React.useState(gameInfo.page);\r\n  const [wordNumber, setWordNumber] = React.useState(1);\r\n  const [words, setWords] = React.useState([]);\r\n  async function getWords() {\r\n    let response = await fetch(\r\n      `https://react-learnwords-example.herokuapp.com/words?group=${level}&page=${page}`\r\n    );\r\n    let data = await response.json();\r\n    return data;\r\n  }\r\n  React.useEffect(() => {\r\n    const intervalFunction = () => {\r\n      if (countDown - 1 > 0 && !showLevels) {\r\n        setCountDown(countDown - 1);\r\n      } else if (showLevels) {\r\n        setCountDown(60);\r\n      } else {\r\n        setCountDown(0);\r\n        setIsPlaying(false);\r\n        if (score > sprint.record) {\r\n          dispatch({ type: \"SET_NEW_SPRINT_RECORD\", payload: score });\r\n        }\r\n      }\r\n    };\r\n    const interval = setInterval(intervalFunction, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [countDown, dispatch, showLevels]);\r\n  React.useEffect(() => {\r\n    getWords().then((resp) => {\r\n      setWords(resp);\r\n    });\r\n  }, [level]);\r\n  React.useEffect(() => {\r\n    console.log(wordNumber);\r\n    if ((wordNumber + 1) % 20 === 0) {\r\n      if (page + 1 < 30) {\r\n        console.log(page + 1);\r\n        setPage(page + 1);\r\n        getWords().then((resp) => {\r\n          setWords(resp);\r\n          setShowCorrectTranslation(() => {\r\n            if (Math.floor(Math.random() * 2) === 1) {\r\n              const tempWord = words[wordNumber];\r\n              setWord(tempWord);\r\n              setTranslation(tempWord);\r\n              return true;\r\n            } else {\r\n              const tempNumber = Math.floor(Math.random() * 19);\r\n              setWord(words[tempNumber]);\r\n              let translationIndex = Math.floor(Math.random() * 19);\r\n              while (translationIndex === tempNumber) {\r\n                translationIndex = Math.floor(Math.random() * 19);\r\n              }\r\n              setTranslation(words[translationIndex]);\r\n              return false;\r\n            }\r\n          });\r\n        });\r\n      } else {\r\n        setIsPlaying(false);\r\n      }\r\n    } else {\r\n      getWords().then((resp) => {\r\n        setWords(resp);\r\n        setShowCorrectTranslation(() => {\r\n          if (Math.floor(Math.random() * 2) === 1) {\r\n            const tempWord = resp[wordNumber];\r\n            setWord(tempWord);\r\n            setTranslation(tempWord);\r\n            return true;\r\n          } else {\r\n            const tempNumber = Math.floor(Math.random() * 19);\r\n            setWord(resp[tempNumber]);\r\n            let translationIndex = Math.floor(Math.random() * 19);\r\n            while (translationIndex === tempNumber) {\r\n              translationIndex = Math.floor(Math.random() * 19);\r\n            }\r\n            setTranslation(resp[translationIndex]);\r\n            return false;\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }, [next]);\r\n  return (\r\n    <div className={styles.game_wrapper}>\r\n      {showLevels ? (\r\n        <div className={styles.levels}>\r\n          <h2>Уровень Сложности</h2>\r\n          <div>\r\n            <button\r\n              onClick={() => {\r\n                setLevel(0);\r\n                setShowLevels(false);\r\n              }}\r\n            >\r\n              1\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={() => {\r\n                setLevel(1);\r\n                setShowLevels(false);\r\n              }}\r\n            >\r\n              2\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={() => {\r\n                setLevel(2);\r\n                setShowLevels(false);\r\n              }}\r\n            >\r\n              3\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={() => {\r\n                setLevel(3);\r\n                setShowLevels(false);\r\n              }}\r\n            >\r\n              4\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={() => {\r\n                setLevel(4);\r\n                setShowLevels(false);\r\n              }}\r\n            >\r\n              5\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={() => {\r\n                setLevel(5);\r\n                setShowLevels(false);\r\n              }}\r\n            >\r\n              6\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {!isPlaying ? (\r\n        <div className={styles.result}>\r\n          <h1>{score} очков</h1>\r\n          <h3>Ваш рекорд : {sprint.record} очков</h3>\r\n          <div className={styles.wrongAnswers}>\r\n            <h3>\r\n              Ошибок{\" \"}\r\n              <span className={styles.failedCount}>{failedWords.length}</span>\r\n            </h3>\r\n            {failedWords.map((word, index) => {\r\n              return (\r\n                <div className={styles.resultWord} key={index}>\r\n                  <button\r\n                    onClick={() => {\r\n                      const audio = new Audio(`${word.audio}`);\r\n                      audio.play();\r\n                    }}\r\n                    style={{\r\n                      width: \"30px\",\r\n                      height: \"20px\",\r\n                      backgroundColor: \"inherit\",\r\n                      margin: \"10px\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={soundImage}\r\n                      alt=\"sound-icon\"\r\n                      style={{ width: \"100%\", height: \"140%\" }}\r\n                    />\r\n                  </button>\r\n                  <span\r\n                    style={{ fontWeight: \"bold\", textTransform: \"capitalize\" }}\r\n                  >\r\n                    {word.word} -{\" \"}\r\n                    <i style={{ fontWeight: \"lighter\" }}>\r\n                      {word.wordTranslate}\r\n                    </i>\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className={styles.wrongAnswers}>\r\n            <h3>\r\n              Правильно{\" \"}\r\n              <span className={styles.foundCount}>{foundWords.length}</span>\r\n            </h3>\r\n            {foundWords.map((word, index) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              return (\r\n                <div className={styles.resultWord} key={index}>\r\n                  <button\r\n                    onClick={() => {\r\n                      audio.play();\r\n                    }}\r\n                    style={{\r\n                      width: \"30px\",\r\n                      height: \"20px\",\r\n                      backgroundColor: \"inherit\",\r\n                      margin: \"10px\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={soundImage}\r\n                      alt=\"sound-icon\"\r\n                      style={{ width: \"100%\", height: \"140%\" }}\r\n                    />\r\n                  </button>\r\n                  <span\r\n                    style={{ fontWeight: \"bold\", textTransform: \"capitalize\" }}\r\n                  >\r\n                    {word.word} -{\" \"}\r\n                    <i style={{ fontWeight: \"lighter\" }}>\r\n                      {word.wordTranslate}\r\n                    </i>\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <button\r\n            onClick={() => {\r\n              setFoundWords([]);\r\n              setFailedWords([]);\r\n              setIsPlaying(true);\r\n              setNumberOfLights([0, 0, 0]);\r\n              setPoints(10);\r\n              setScore(0);\r\n              setCountDown(60);\r\n              setFoundCorrectInARow(0);\r\n              setBirds([1, 0, 0, 0]);\r\n              setStageSuccesInARow(0);\r\n            }}\r\n          >\r\n            Попробывать еще раз\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div className={styles.score}>{score}</div>\r\n      <div className={styles.countDown}>{countDown}</div>\r\n      <div className={styles.game_display}>\r\n        <div\r\n          style={{\r\n            background: `${\r\n              stageSuccessInARow === 0\r\n                ? \"inherit\"\r\n                : stageSuccessInARow === 1\r\n                ? \"orange\"\r\n                : stageSuccessInARow === 2\r\n                ? \"brown\"\r\n                : \"hotpink\"\r\n            }`,\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          <div className={styles.lights}>\r\n            {numberOfLights.map((light, index) => {\r\n              if (light === 1) {\r\n                return (\r\n                  <div\r\n                    className={styles.light}\r\n                    style={{\r\n                      background: \"green\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                    key={index}\r\n                  >\r\n                    <img src={tickImage} alt=\"checked\" />\r\n                  </div>\r\n                );\r\n              }\r\n              return <div className={styles.light}></div>;\r\n            })}\r\n          </div>\r\n          <div\r\n            style={{\r\n              paddingBottom: \"5px\",\r\n              opacity: `${points !== 10 ? \"1\" : \"0\"}`,\r\n            }}\r\n          >\r\n            {`+${points} очков за слово `}\r\n          </div>\r\n        </div>\r\n        <div className={styles.birds}>\r\n          {birds\r\n            .filter((bird) => {\r\n              return bird === 1;\r\n            })\r\n            .map((bird, index) => {\r\n              return <div className={styles.bird} key={index}></div>;\r\n            })}\r\n        </div>\r\n        <div className={styles.branch}></div>\r\n        <div className={styles.word_section}>\r\n          <div className={styles.word}>{word.word}</div>\r\n          <div className={styles.word}>{translation.wordTranslate}</div>\r\n        </div>\r\n        <div className={styles.underline}></div>\r\n        <div className={styles.answer_section}>\r\n          <button\r\n            className={styles.wrong}\r\n            onClick={() => {\r\n              dispatch({ type: \"ADD_TO_LEARNING_WORDS\", payload: word });\r\n              if (showCorrectTranslation === false) {\r\n                if (foundWords.length === 0) {\r\n                  setFoundWords([word]);\r\n                } else {\r\n                  setFoundWords([...foundWords, word]);\r\n                }\r\n                if ((foundCorrectInARow + 1) % 4 === 0) {\r\n                  if (points < 70) {\r\n                    setPoints(20 * (stageSuccessInARow + 1) + 10);\r\n                  }\r\n                  if (JSON.stringify(birds) !== JSON.stringify([1, 1, 1, 1])) {\r\n                    setBirds(() => {\r\n                      let newBirds = [...birds];\r\n                      newBirds.pop();\r\n                      newBirds.unshift(1);\r\n                      return newBirds;\r\n                    });\r\n                  }\r\n                  setStageSuccesInARow(stageSuccessInARow + 1);\r\n                }\r\n                dispatch({\r\n                  type: \"INCREMENT_WORD_ALLTIMEFOUND\",\r\n                  payload: word,\r\n                });\r\n                setFoundCorrectInARow(foundCorrectInARow + 1);\r\n                setScore(score + points);\r\n                setNumberOfLights(() => {\r\n                  if (stageSuccessInARow > 2) {\r\n                    return [1];\r\n                  } else if (\r\n                    JSON.stringify(numberOfLights) ===\r\n                      JSON.stringify([1, 1, 1]) &&\r\n                    stageSuccessInARow < 2\r\n                  ) {\r\n                    return [0, 0, 0];\r\n                  }\r\n                  let newLights = [...numberOfLights];\r\n                  newLights.pop();\r\n                  newLights.unshift(1);\r\n                  return newLights;\r\n                });\r\n              } else {\r\n                dispatch({\r\n                  type: \"INCREMENT_WORD_ALLTIMEFAILED\",\r\n                  payload: word,\r\n                });\r\n                if (failedWords.length === 0) {\r\n                  setFailedWords([word]);\r\n                } else {\r\n                  setFailedWords([...failedWords, word]);\r\n                }\r\n                setFoundCorrectInARow(0);\r\n                setStageSuccesInARow(0);\r\n                setNumberOfLights([0, 0, 0]);\r\n                setPoints(10);\r\n                setBirds([1, 0, 0, 0]);\r\n              }\r\n              setWordNumber(() => {\r\n                if ((wordNumber + 1) % 20 === 0) {\r\n                  return 1;\r\n                } else {\r\n                  return wordNumber + 1;\r\n                }\r\n              });\r\n              setNext(next + 1);\r\n            }}\r\n          >\r\n            Неверно\r\n          </button>\r\n          <button\r\n            className={styles.correct}\r\n            onClick={() => {\r\n              if (showCorrectTranslation === true) {\r\n                if (foundWords.length === 0) {\r\n                  setFoundWords([word]);\r\n                } else {\r\n                  setFoundWords([...foundWords, word]);\r\n                }\r\n                if ((foundCorrectInARow + 1) % 4 === 0) {\r\n                  if (points < 70) {\r\n                    setPoints(20 * (stageSuccessInARow + 1) + 10);\r\n                  }\r\n                  if (JSON.stringify(birds) !== JSON.stringify([1, 1, 1, 1])) {\r\n                    setBirds(() => {\r\n                      let newBirds = [...birds];\r\n                      newBirds.pop();\r\n                      newBirds.unshift(1);\r\n                      return newBirds;\r\n                    });\r\n                  }\r\n                  setStageSuccesInARow(stageSuccessInARow + 1);\r\n                }\r\n                dispatch({\r\n                  type: \"INCREMENT_WORD_ALLTIMEFOUND\",\r\n                  payload: word,\r\n                });\r\n                setFoundCorrectInARow(foundCorrectInARow + 1);\r\n                setScore(score + points);\r\n                setNumberOfLights(() => {\r\n                  if (stageSuccessInARow > 2) {\r\n                    return [1];\r\n                  } else if (\r\n                    JSON.stringify(numberOfLights) ===\r\n                      JSON.stringify([1, 1, 1]) &&\r\n                    stageSuccessInARow < 2\r\n                  ) {\r\n                    return [0, 0, 0];\r\n                  }\r\n                  let newLights = [...numberOfLights];\r\n                  newLights.pop();\r\n                  newLights.unshift(1);\r\n                  return newLights;\r\n                });\r\n              } else {\r\n                dispatch({\r\n                  type: \"INCREMENT_WORD_ALLTIMEFAILED\",\r\n                  payload: word,\r\n                });\r\n                if (failedWords.length === 0) {\r\n                  setFailedWords([word]);\r\n                } else {\r\n                  setFailedWords([...failedWords, word]);\r\n                }\r\n                setFoundCorrectInARow(0);\r\n                setStageSuccesInARow(0);\r\n                setNumberOfLights([0, 0, 0]);\r\n                setPoints(10);\r\n                setBirds([1, 0, 0, 0]);\r\n              }\r\n              setWordNumber(() => {\r\n                if ((wordNumber + 1) % 20 === 0) {\r\n                  return 1;\r\n                } else {\r\n                  return wordNumber + 1;\r\n                }\r\n              });\r\n              setNext(next + 1);\r\n            }}\r\n          >\r\n            Правильно\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SprintGame;\r\n",{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":3,"column":3,"nodeType":"128","messageId":"129","endLine":3,"endColumn":14},{"ruleId":"130","severity":1,"message":"131","line":39,"column":19,"nodeType":"132","endLine":45,"endColumn":20},{"ruleId":"130","severity":1,"message":"131","line":39,"column":19,"nodeType":"132","endLine":45,"endColumn":20},{"ruleId":"126","severity":1,"message":"133","line":15,"column":8,"nodeType":"128","messageId":"129","endLine":15,"endColumn":15},{"ruleId":"126","severity":1,"message":"134","line":16,"column":25,"nodeType":"128","messageId":"129","endLine":16,"endColumn":31},{"ruleId":"126","severity":1,"message":"135","line":16,"column":33,"nodeType":"128","messageId":"129","endLine":16,"endColumn":38},{"ruleId":"126","severity":1,"message":"136","line":29,"column":9,"nodeType":"128","messageId":"129","endLine":29,"endColumn":14},{"ruleId":"137","severity":1,"message":"138","line":62,"column":6,"nodeType":"139","endLine":62,"endColumn":46,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":277,"column":19,"nodeType":"132","endLine":277,"endColumn":55},{"ruleId":"126","severity":1,"message":"143","line":6,"column":8,"nodeType":"128","messageId":"129","endLine":6,"endColumn":19},{"ruleId":"126","severity":1,"message":"144","line":9,"column":8,"nodeType":"128","messageId":"129","endLine":9,"endColumn":21},{"ruleId":"145","severity":1,"message":"146","line":75,"column":36,"nodeType":"147","messageId":"148","endLine":75,"endColumn":38},{"ruleId":"141","severity":1,"message":"142","line":98,"column":21,"nodeType":"132","endLine":98,"endColumn":57},{"ruleId":"141","severity":1,"message":"142","line":216,"column":23,"nodeType":"132","endLine":216,"endColumn":59},{"ruleId":"141","severity":1,"message":"142","line":311,"column":21,"nodeType":"132","endLine":311,"endColumn":57},{"ruleId":"149","severity":1,"message":"150","line":9,"column":13,"nodeType":"132","endLine":14,"endColumn":14},{"ruleId":"151","severity":1,"message":"152","line":40,"column":15,"nodeType":"132","messageId":"153","endLine":40,"endColumn":71,"fix":"154"},{"ruleId":"126","severity":1,"message":"155","line":1,"column":10,"nodeType":"128","messageId":"129","endLine":1,"endColumn":18},{"ruleId":"126","severity":1,"message":"156","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":16},{"ruleId":"126","severity":1,"message":"157","line":12,"column":12,"nodeType":"128","messageId":"129","endLine":12,"endColumn":21},{"ruleId":"126","severity":1,"message":"158","line":12,"column":23,"nodeType":"128","messageId":"129","endLine":12,"endColumn":35},{"ruleId":"137","severity":1,"message":"159","line":118,"column":8,"nodeType":"139","endLine":118,"endColumn":10,"suggestions":"160"},{"ruleId":"137","severity":1,"message":"161","line":130,"column":8,"nodeType":"139","endLine":130,"endColumn":13,"suggestions":"162"},{"ruleId":"137","severity":1,"message":"163","line":137,"column":8,"nodeType":"139","endLine":137,"endColumn":19,"suggestions":"164"},{"ruleId":"137","severity":1,"message":"165","line":53,"column":6,"nodeType":"139","endLine":53,"endColumn":39,"suggestions":"166"},{"ruleId":"137","severity":1,"message":"167","line":58,"column":6,"nodeType":"139","endLine":58,"endColumn":13,"suggestions":"168"},{"ruleId":"137","severity":1,"message":"169","line":110,"column":6,"nodeType":"139","endLine":110,"endColumn":12,"suggestions":"170"},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Savanna' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'match' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'allWords', 'dispatch', and 'getWords'. Either include them or remove the dependency array.","ArrayExpression",["173"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'deleteImage' is defined but never used.","'settingsImage' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"174","text":"175"},"'useState' is defined but never used.","'ReactDOM' is defined but never used.","'gameLevel' is assigned a value but never used.","'setGameLevel' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'findWords'. Either include it or remove the dependency array.",["176"],"React Hook useEffect has missing dependencies: 'findWords' and 'lifesLeft'. Either include them or remove the dependency array.",["177"],"React Hook useEffect has a missing dependency: 'gameOver'. Either include it or remove the dependency array.",["178"],"React Hook React.useEffect has missing dependencies: 'score' and 'sprint.record'. Either include them or remove the dependency array.",["179"],"React Hook React.useEffect has a missing dependency: 'getWords'. Either include it or remove the dependency array.",["180"],"React Hook React.useEffect has missing dependencies: 'getWords', 'page', 'wordNumber', and 'words'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setShowCorrectTranslation' needs the current value of 'wordNumber'.",["181"],"no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},[1230,1230]," rel=\"noreferrer\"",{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [currentWordGroupPage, currentWordGroup, getWords, dispatch, allWords]",{"range":"196","text":"197"},"Update the dependencies array to be: [findWords]",{"range":"198","text":"199"},"Update the dependencies array to be: [findWords, lifesLeft, top]",{"range":"200","text":"201"},"Update the dependencies array to be: [gameOver, lifesLeft]",{"range":"202","text":"203"},"Update the dependencies array to be: [countDown, dispatch, score, showLevels, sprint.record]",{"range":"204","text":"205"},"Update the dependencies array to be: [getWords, level]",{"range":"206","text":"207"},"Update the dependencies array to be: [getWords, next, page, wordNumber, words]",{"range":"208","text":"209"},[2246,2286],"[currentWordGroupPage, currentWordGroup, getWords, dispatch, allWords]",[3282,3284],"[findWords]",[3622,3627],"[findWords, lifesLeft, top]",[3765,3776],"[gameOver, lifesLeft]",[2295,2328],"[countDown, dispatch, score, showLevels, sprint.record]",[2429,2436],"[getWords, level]",[4243,4249],"[getWords, next, page, wordNumber, words]"]