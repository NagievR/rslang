[{"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\index.js":"1","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\App.js":"2","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\aboutApp\\aboutApp.js":"3","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\footer\\footer.js":"4","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\games\\gamesMain.js":"5","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\context\\context.js":"6","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\reducer\\reducer.js":"7","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\dictionary\\Dictionary.js":"8","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\eBook\\EBook.js":"9","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\games\\routes\\start\\start.js":"10","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\games\\routes\\savanna-g1\\index.js":"11","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\AboutTeam\\aboutTeam.js":"12","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\header\\header.js":"13","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\loginRegister\\loginRegistration.js":"14","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\main\\main.js":"15","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\notFound\\notFound.js":"16","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\games\\routes\\match\\index.js":"17"},{"size":302,"mtime":1617529656515,"results":"18","hashOfConfig":"19"},{"size":1839,"mtime":1618250875750,"results":"20","hashOfConfig":"19"},{"size":2693,"mtime":1617529655378,"results":"21","hashOfConfig":"19"},{"size":1935,"mtime":1617529655388,"results":"22","hashOfConfig":"19"},{"size":661,"mtime":1618249836236,"results":"23","hashOfConfig":"19"},{"size":109,"mtime":1617529655382,"results":"24","hashOfConfig":"19"},{"size":19554,"mtime":1617529656003,"results":"25","hashOfConfig":"19"},{"size":15104,"mtime":1617529655383,"results":"26","hashOfConfig":"19"},{"size":14565,"mtime":1617530797740,"results":"27","hashOfConfig":"19"},{"size":3663,"mtime":1618249760955,"results":"28","hashOfConfig":"19"},{"size":10345,"mtime":1617887345908,"results":"29","hashOfConfig":"19"},{"size":3483,"mtime":1617529655369,"results":"30","hashOfConfig":"19"},{"size":1788,"mtime":1617625171501,"results":"31","hashOfConfig":"19"},{"size":3614,"mtime":1617890513997,"results":"32","hashOfConfig":"19"},{"size":1556,"mtime":1617529655989,"results":"33","hashOfConfig":"19"},{"size":532,"mtime":1617529655998,"results":"34","hashOfConfig":"19"},{"size":10860,"mtime":1618253081245,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"wodpw2",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\index.js",[],["76","77"],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\App.js",[],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\aboutApp\\aboutApp.js",[],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\footer\\footer.js",[],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\games\\gamesMain.js",[],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\context\\context.js",[],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\reducer\\reducer.js",[],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\dictionary\\Dictionary.js",["78","79","80","81","82","83","84","85","86"],"import React from \"react\";\r\nimport styles from \"./dictionary.module.css\";\r\nimport RSLangContext from \"../context/context\";\r\nimport soundImage from \"../../assets/sound.png\";\r\nimport saveImage from \"../../assets/floppy-disk.png\";\r\nimport deleteImage from \"../../assets/trash.png\";\r\nimport leftArrowImage from \"../../assets/left-arrow.png\";\r\nimport rightArrowImage from \"../../assets/right-arrow.png\";\r\nimport settingsImage from \"../../assets/settings.png\";\r\nimport undoImage from \"../../assets/undo.png\";\r\nfunction Dictionary() {\r\n  const {\r\n    currentSection,\r\n    dispatch,\r\n    savedWords,\r\n    deletedWords,\r\n    learningWords,\r\n    showAddToHardOrDeletedWordsButtons,\r\n    showWordTranslationAndTranslatedExampleSentence,\r\n  } = React.useContext(RSLangContext);\r\n  return (\r\n    <div className={styles.dictionary}>\r\n      <div className={styles.wordList}>\r\n        <div className={styles.navigation}>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"learning_words\"\r\n                      ? styles.activeButton\r\n                      : \"\"\r\n                  }\r\n                  id=\"learning_words\"\r\n                >\r\n                  Изучаемые Слова\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"difficult_words\"\r\n                      ? styles.activeButton\r\n                      : \"\"\r\n                  }\r\n                  id=\"difficult_words\"\r\n                >\r\n                  Сложные Слова\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection == \"deleted_words\" ? styles.activeButton : \"\"\r\n                  }\r\n                  id=\"deleted_words\"\r\n                >\r\n                  Удаленные Слова\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n        {currentSection === \"learning_words\"\r\n          ? learningWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        {!word.isDeletedWord ? (\r\n                          <button\r\n                            style={{\r\n                              width: \"30px\",\r\n                              height: \"20px\",\r\n                              backgroundColor: \"inherit\",\r\n                            }}\r\n                            onClick={() => {\r\n                              dispatch({\r\n                                type: \"TOGGLE_SAVED_WORD\",\r\n                                payload: word.id,\r\n                              });\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src={saveImage}\r\n                              alt=\"\"\r\n                              style={{ width: \"100%\", height: \"100%\" }}\r\n                            />\r\n                          </button>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        <button\r\n                          style={{\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: `${\r\n                                word.isDeletedWord\r\n                                  ? \"RETURN_WORD\"\r\n                                  : \"REMOVE_FROM_LEARNING_WORDS\"\r\n                              }`,\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img src={undoImage} alt=\"\" />\r\n                        </button>\r\n                      </p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : currentSection === \"difficult_words\"\r\n          ? savedWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"TOGGLE_SAVED_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={saveImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                      </p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : currentSection === \"deleted_words\"\r\n          ? deletedWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        <button\r\n                          style={{\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"RETURN_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img src={undoImage} alt=\"\" />\r\n                        </button>\r\n                      </p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dictionary;\r\n","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\eBook\\EBook.js",["87","88"],"import React from \"react\";\r\nimport RSLangContext from \"../context/context\";\r\nimport styles from \"./ebook.module.css\";\r\nimport soundImage from \"../../assets/sound.png\";\r\nimport saveImage from \"../../assets/floppy-disk.png\";\r\nimport deleteImage from \"../../assets/trash.png\";\r\nimport leftArrowImage from \"../../assets/left-arrow.png\";\r\nimport rightArrowImage from \"../../assets/right-arrow.png\";\r\nimport settingsImage from \"../../assets/settings.png\";\r\nimport timesImage from \"../../assets/remove.png\";\r\nimport tickImage from \"../../assets/check.png\";\r\nfunction EBook() {\r\n  const {\r\n    currentWordGroup,\r\n    currentWordGroupPage,\r\n    showWordTranslationAndTranslatedExampleSentence,\r\n    showAddToHardOrDeletedWordsButtons,\r\n    wordsToDisplay,\r\n    showSettings,\r\n    currentSection,\r\n    dispatch,\r\n  } = React.useContext(RSLangContext);\r\n  async function getWords() {\r\n    let response = await fetch(\r\n      `https://react-learnwords-example.herokuapp.com/words?group=${currentWordGroup}&page=${currentWordGroupPage}`\r\n    );\r\n    let data = await response.json();\r\n    return data;\r\n  }\r\n  React.useEffect(() => {\r\n    getWords().then((resp) =>\r\n      dispatch({\r\n        type: \"WORDS_TO_DISPLAY_LOADED\",\r\n        payload: resp.map((word) => {\r\n          return { ...word, isSavedWord: false, isDeletedWord: false };\r\n        }),\r\n      })\r\n    );\r\n  }, [currentWordGroupPage, currentWordGroup]);\r\n\r\n  return (\r\n    <div className={styles.eBook}>\r\n      {showSettings ? (\r\n        <div className={styles.settings}>\r\n          <div style={{ position: \"relative\" }}>\r\n            <div className={styles.settingsButton}>\r\n              <button\r\n                style={{\r\n                  width: \"50px\",\r\n                  height: \"40px\",\r\n                  backgroundColor: \"inherit\",\r\n                }}\r\n                onClick={() => {\r\n                  dispatch({ type: \"TOGGLE_SHOW_SETTINGS\" });\r\n                }}\r\n              >\r\n                <img\r\n                  src={settingsImage}\r\n                  alt=\"settings-icon\"\r\n                  style={{ width: \"100%\", height: \"100%\" }}\r\n                />\r\n              </button>\r\n            </div>\r\n            <h1>Настройки</h1>\r\n            <div className={styles.settingsDivButtons}>\r\n              <div className={styles.settingsButton}>\r\n                <button\r\n                  style={{\r\n                    width: \"50px\",\r\n                    height: \"40px\",\r\n                    backgroundColor: \"inherit\",\r\n                  }}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"TOGGLE_SHOW_SETTINGS\" });\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={settingsImage}\r\n                    alt=\"settings-icon\"\r\n                    style={{ width: \"100%\", height: \"100%\" }}\r\n                  />\r\n                </button>\r\n              </div>\r\n              <p>\r\n                {showWordTranslationAndTranslatedExampleSentence\r\n                  ? \"Показывать Перевод Слова и Перевод Предложения Со Словом\"\r\n                  : \"Спрятать Перевод Слова и Перевод Предложения Со Словом\"}\r\n              </p>\r\n              <button\r\n                onClick={() => {\r\n                  dispatch({ type: \"TOGGLE_TRANSLATION_BUTTON\" });\r\n                }}\r\n              >\r\n                <img\r\n                  src={\r\n                    showWordTranslationAndTranslatedExampleSentence\r\n                      ? tickImage\r\n                      : timesImage\r\n                  }\r\n                  alt=\"\"\r\n                />\r\n              </button>\r\n            </div>\r\n            <div className={styles.settingsDivButtons}>\r\n              <p>\r\n                {showAddToHardOrDeletedWordsButtons\r\n                  ? \"Показывать Кнопки 'Добавить в Сложные Слова' и 'Добавить в Удалённые Слова'\"\r\n                  : \"Спрятать Кнопки 'Добавить в Сложные Слова' и 'Добавить в Удалённые Слова'\"}\r\n              </p>\r\n              <button\r\n                onClick={() => {\r\n                  dispatch({ type: \"TOGGLE_ADD_OR_DELETE_BUTTON\" });\r\n                }}\r\n              >\r\n                <img\r\n                  src={\r\n                    showAddToHardOrDeletedWordsButtons ? tickImage : timesImage\r\n                  }\r\n                  alt=\"\"\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div className={styles.wordList}>\r\n        <div className={styles.navigation}>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 0 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 0 });\r\n                  }}\r\n                >\r\n                  Раздел 1\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 1 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 1 });\r\n                  }}\r\n                >\r\n                  Раздел 2\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 2 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 2 });\r\n                  }}\r\n                >\r\n                  Раздел 3\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 3 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 3 });\r\n                  }}\r\n                >\r\n                  Раздел 4\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 4 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 4 });\r\n                  }}\r\n                >\r\n                  Раздел 5\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 5 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 5 });\r\n                  }}\r\n                >\r\n                  Раздел 6\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={() => {\r\n                    dispatch({\r\n                      type: \"TOGGLE_SHOW_SETTINGS\",\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"settings\"\r\n                      ? `${styles.activeButton}`\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  Настройки Э-Книги\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <input\r\n                  type=\"number\"\r\n                  onChange={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_PAGE\",\r\n                      payload: event.target.value,\r\n                    });\r\n                  }}\r\n                  value={currentWordGroupPage + 1}\r\n                  max=\"30\"\r\n                  min=\"1\"\r\n                  style={{\r\n                    border: \"none\",\r\n                    width: \"40px\",\r\n                    ouline: \"0px\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"1.5rem\",\r\n                    position: \"absolute\",\r\n                    top: \"0\",\r\n                    right: \"0\",\r\n                  }}\r\n                />\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n          {wordsToDisplay.length === 0 ? (\r\n            <div style={{ textAlign: \"center\", color: \"#000\" }}>\r\n              <h2>\r\n                Вы переместиле все слова с текущей страницы в \"Удалённые Слова\"\r\n              </h2>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {wordsToDisplay.map((word) => {\r\n            const audio = new Audio(`${word.audio}`);\r\n            const audioExample = new Audio(`${word.audioExample}`);\r\n            const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n            return (\r\n              <div\r\n                className={`${styles.word} ${\r\n                  word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                }`}\r\n                key={word.id}\r\n              >\r\n                <div className={styles.image}>\r\n                  <img src={word.image} alt=\"image\" />\r\n                </div>\r\n                <div className={styles.wordInfo}>\r\n                  <div className={styles.wordInfoFirstRow}>\r\n                    <p className={styles.wordTitle}>{word.word}</p>\r\n                    <p className={styles.wordTranscription}>\r\n                      {word.transcription}\r\n                    </p>\r\n                    <p>\r\n                      <button\r\n                        style={{\r\n                          width: \"30px\",\r\n                          height: \"20px\",\r\n                          backgroundColor: \"inherit\",\r\n                        }}\r\n                        onClick={() => {\r\n                          audio.play();\r\n                          setTimeout(() => {\r\n                            audioMeaning.play();\r\n                          }, audio.duration * 1000 + 500);\r\n                          setTimeout(() => {\r\n                            audioExample.play();\r\n                          }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src={soundImage}\r\n                          alt=\"\"\r\n                          style={{ width: \"100%\", height: \"100%\" }}\r\n                        />\r\n                      </button>\r\n                      {showAddToHardOrDeletedWordsButtons ? (\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"TOGGLE_SAVED_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={saveImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {showAddToHardOrDeletedWordsButtons ? (\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"DELETE_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={deleteImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n                  <p style={{ fontWeight: \"bold\" }}>\r\n                    {showWordTranslationAndTranslatedExampleSentence\r\n                      ? word.wordTranslate\r\n                      : \"\"}\r\n                  </p>\r\n                  <p dangerouslySetInnerHTML={{ __html: word.textMeaning }}></p>\r\n                  {showWordTranslationAndTranslatedExampleSentence ? (\r\n                    <p>{word.textMeaningTranslate}</p>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  <p\r\n                    dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                    style={{ fontStyle: \"italic\" }}\r\n                  ></p>\r\n                  <p>\r\n                    {showWordTranslationAndTranslatedExampleSentence\r\n                      ? word.textExampleTranslate\r\n                      : \"\"}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n          <div className={styles.bottom}>\r\n            <h3>Номер Страницы Слов : {currentWordGroupPage + 1}</h3>\r\n            <button\r\n              style={{\r\n                width: \"40px\",\r\n                height: \"30px\",\r\n                backgroundColor: \"inherit\",\r\n              }}\r\n              onClick={() => {\r\n                dispatch({ type: \"DECREASE_PAGE_NUMBER\" });\r\n              }}\r\n            >\r\n              <img\r\n                src={leftArrowImage}\r\n                alt=\"left-arrow-icon\"\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n              />\r\n            </button>\r\n            <button\r\n              style={{\r\n                width: \"40px\",\r\n                height: \"30px\",\r\n                backgroundColor: \"inherit\",\r\n              }}\r\n              onClick={() => {\r\n                dispatch({ type: \"INCREASE_PAGE_NUMBER\" });\r\n              }}\r\n            >\r\n              <img\r\n                src={rightArrowImage}\r\n                alt=\"right-arrow-icon\"\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n              />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EBook;\r\n","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\games\\routes\\start\\start.js",["89"],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\games\\routes\\savanna-g1\\index.js",["90","91","92","93"],"import s from './style.module.css';\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport WORDS from '../../../../data/words.json'\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst Savanna = () => {\r\n    const history = useHistory()\r\n\r\n    const [wordsIndex, setWordsIndex] = useState([])\r\n    const [translatedWord, setTranslatedWord] = useState(['','','',''])\r\n    const [wordToTranslate, setWordToTranslate] = useState({})\r\n    const [gameLevel, setGameLevel] = useState(1)\r\n\r\n    //game parametres\r\n    const [score, setScore] = useState(0)\r\n    const [top, setTop] = useState(0)\r\n    const [lifesLeft, setLifesLeft] = useState(7)\r\n    const [wrongWord, setWrongWord] = useState([])\r\n\r\n    // game start / end \r\n    const [inGame, setInGame] = useState(false)\r\n    const [isOver, setIsOver] = useState(false)\r\n\r\n    const findWords = async () => {\r\n        const gameWords = []\r\n\r\n        // random index to choose word wich player gona translate\r\n        const wordToTranslateIndex = Math.floor(Math.random() * 4)\r\n\r\n        for (let i = 0; i < 4; i ++) {\r\n            let safeIndexesArr = await checkedIndex(i)\r\n\r\n            if (i === wordToTranslateIndex) {\r\n                const newWord = {\r\n                        word: WORDS[safeIndexesArr].word,\r\n                        translation: WORDS[safeIndexesArr].wordTranslate\r\n                    }\r\n\r\n                setWordToTranslate(newWord)\r\n            }\r\n\r\n            gameWords.push(WORDS[safeIndexesArr].wordTranslate)\r\n        }\r\n\r\n        setTranslatedWord(prevState => {\r\n                return (\r\n                    prevState.map((w, ind) => {\r\n                        return  gameWords[ind]\r\n                    })\r\n                )\r\n            })\r\n    }\r\n         \r\n    const checkedIndex = async (i) => {\r\n        const uncheckedIndex = getRandUncheckedIndex()\r\n\r\n        const checkedI = await checkIfIndexUsed(uncheckedIndex)\r\n\r\n        setWordsIndex((prevState) => {\r\n            prevState.push(checkedI)\r\n\r\n            return prevState\r\n        })\r\n    \r\n        return wordsIndex[wordsIndex.length - 1]\r\n    }\r\n\r\n    const getRandUncheckedIndex = () => {\r\n        return (Math.floor(Math.random() * 3600))\r\n    }\r\n\r\n    const checkIfIndexUsed = (index) => {\r\n        let tempI = index\r\n\r\n        while (wordsIndex.includes(tempI)) {\r\n            tempI = getRandUncheckedIndex()\r\n        }\r\n        return tempI\r\n    }\r\n\r\n    const checkAnswer = (w) => {\r\n        if (w === wordToTranslate.translation) {\r\n            findWords()\r\n            setScore(prevState => prevState + 83)\r\n            falling('reset')\r\n        } else {\r\n            setLifesLeft(prevState => prevState - 1)\r\n            minusHeart()\r\n            pushWrongWord()\r\n        }\r\n    }\r\n\r\n    const falling = (reset) => {\r\n        let t;\r\n        if (reset !== 'gameOver') {\r\n            t = setInterval(() => {\r\n                setTop(p => p+1)\r\n            }, 6)\r\n        } if (reset === 'reset') {\r\n            clearInterval(t)\r\n            setTop(0)\r\n        }\r\n    }\r\n\r\n    if (inGame) {\r\n\r\n    }\r\n\r\n    const minusHeart = () => {\r\n        let lifes = document.getElementById(s.lifes).textContent.split('')\r\n        lifes.pop()\r\n        lifes = lifes.join('')\r\n        document.getElementById(s.lifes).textContent = lifes\r\n    }\r\n\r\n    const gameOver = () => {\r\n        setIsOver(p => !p)\r\n        falling('gameOver')\r\n        setInGame(false)\r\n    }\r\n\r\n    const startGame = () => {\r\n        setInGame(true)\r\n        findWords()\r\n        falling()\r\n    }\r\n\r\n    const goto = (route) => {\r\n        history.push(route)\r\n    }\r\n\r\n    // const startNewGame = () => {\r\n    //     resetStats()\r\n    // }\r\n\r\n    // const resetStats = () => {\r\n    //     setInGame(false)\r\n    //     // setIsOver(false)\r\n    //     setScore(0)\r\n    //     setTop(0)\r\n    //     setLifesLeft(7)\r\n    //     setWrongWord([])\r\n    //     setWordToTranslate({})\r\n    //     setTranslatedWord(['','','',''])\r\n    //     falling('reset')\r\n    //     setIsOver(p => !p)\r\n\r\n    // }\r\n\r\n    useEffect(() => {\r\n        const gameWindowHeight = document.getElementById(s.game).clientHeight\r\n\r\n        if (top === gameWindowHeight) {\r\n            if (lifesLeft < 1) {\r\n                minusHeart()\r\n                return\r\n            }\r\n            pushWrongWord()\r\n            setLifesLeft(prevState => prevState - 1)\r\n            minusHeart()\r\n            findWords()\r\n            falling('reset')\r\n        }\r\n    }, [top])\r\n\r\n    const pushWrongWord = () => {\r\n        if (wrongWord.length !== 0 \r\n            && !wrongWord.includes(wordToTranslate.word)) {\r\n                setWrongWord(prevState => {\r\n                    const arr = prevState\r\n                    arr.push(wordToTranslate.word)\r\n                    return arr\r\n                })\r\n        } else if (wrongWord.length === 0 ) {\r\n            setWrongWord([wordToTranslate.word])\r\n        } else return\r\n    }\r\n\r\n    useEffect(()=> {\r\n        if (lifesLeft === 0) {\r\n            falling('reset')\r\n            gameOver()\r\n        }\r\n    }, [lifesLeft])\r\n\r\n    return (\r\n        <>\r\n            <div className={s.game_wrapper}>\r\n               <div className={s.game_box}>\r\n                    <div className={`${s.screen} ${s.greeting_bye_screen} ${inGame ? `${s.hidden}` : `${s.visible}`}`}>\r\n                        <h3 className={s.title}>\r\n                            Саванна\r\n                        </h3>\r\n                        <div className={s.description}>\r\n                            Приготовься, как только ты нажмёшь на Старт, игра начнётся.\r\n                            Твоя задача быстро переводить падающие слова. Если ты ошибёшься\r\n                            или слово упадёт за границы игры, ты потеряешь жизнь! У тебя 7 жизней... Готов?\r\n                        </div>\r\n                        <button \r\n                            onClick={()=> {startGame()}}\r\n                            className={`blue_button`}\r\n                        >\r\n                            Старт\r\n                        </button>\r\n                    </div>\r\n                    \r\n                    <div className={` ${s.screen} ${s.greeting_bye_screen} ${isOver ? s.visible : s.hidden}`}>\r\n                        <h3 className={s.title}>\r\n                            GAME OVER!\r\n                        </h3>\r\n                        <table className={s.stats_table}>\r\n                            <tr>\r\n                                <th className={s.title_min} colspan=\"3\">\r\n                                    Your stats\r\n                                </th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>\r\n                                    Solved\r\n                                </th>\r\n                                <th>\r\n                                    Score\r\n                                </th>\r\n                                <th>\r\n                                    Words unsolved\r\n                                </th>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    {score / 83}\r\n                                </td>\r\n                                <td>\r\n                                    {score}\r\n                                </td>\r\n                                <td>\r\n                                    {wrongWord.map(w => {\r\n                                        return (\r\n                                            <div className={s.wrongWord}>\r\n                                                {w}\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                    {/* {wrongWord.join(',')} */}\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                        <div className={s.get_back}>\r\n                            <button \r\n                                onClick={()=> {goto('/games')}}\r\n                                className={`blue_button`}\r\n                            >\r\n                                К играм\r\n                            </button>\r\n                            {/* <button \r\n                                onClick={()=> {startNewGame()}}\r\n                                className={`blue_button`}\r\n                            >\r\n                                Играть ещё раз\r\n                            </button> */}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={`${s.screen} ${s.game} ${inGame ? `${s.visible}` : `${s.hidden}`}`} id={s.game}>\r\n                        <div \r\n                            className={`${s.word_translate} ${s.word}`}\r\n                            style={{top: `${top}px`}}\r\n                        >\r\n                            {wordToTranslate.word}\r\n                        </div>\r\n                        <div className={s.game_sats}>\r\n                            <div className={s.lifes} id={s.lifes}>\r\n                                {'❤❤❤❤❤❤❤'}\r\n                            </div>\r\n                            <div className={s.score}>\r\n                                {score}\r\n                            </div>\r\n                        </div>\r\n                        {\r\n                            translatedWord.map((w,id) => {\r\n                                return (\r\n                                    <div \r\n                                         key={id} \r\n                                         className={s.word}\r\n                                         onClick={()=>{\r\n                                             checkAnswer(w)\r\n                                         }}\r\n                                     >\r\n                                        {w}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Savanna;","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\AboutTeam\\aboutTeam.js",[],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\header\\header.js",["94"],"import { useHistory } from \"react-router-dom\";\r\n\r\nimport s from \"./style.module.css\";\r\n\r\nconst Header = () => {\r\n  const history = useHistory();\r\n\r\n  const handleLogin = () => {\r\n    history.push(\"/registration\");\r\n  };\r\n\r\n  const handleLinkNavigation = (e, link) => {\r\n        e.preventDefault();\r\n   \r\n        if(link === links[0]) history.push('/');\r\n        else if(link === links[1]) history.push('/games');\r\n        else if (link === links[3]) history.push(\"/eBook\");\r\n        else if (link === links[4]) history.push('/AboutApp');\r\n        else if (link === links[5]) history.push('/AboutTeam');\r\n        else if (link === links[6]) history.push(\"/dictionary\");\r\n    \r\n    }\r\n\r\n  const links = [\r\n    \"Главная\",\r\n    \"Мини-игры\",\r\n    \"Статистика\",\r\n    \"Электронный Учебник\",\r\n    \"О приложении\",\r\n    \"О команде\",\r\n    \"Словарь\",\r\n  ];\r\n  return (\r\n    <>\r\n      <header className={s.root}>\r\n        <nav className={s.nav}>\r\n          <ul>\r\n            {links.map((link, id) => {\r\n              return (\r\n                <li key={id} className={s.nav_list}>\r\n                  <a\r\n                    href=\"#\"\r\n                    className={s.nav_links}\r\n                    onClick={(e) => {\r\n                      handleLinkNavigation(e, link);\r\n                    }}\r\n                  >\r\n                    {link}\r\n                  </a>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <button\r\n            onClick={() => {\r\n              handleLogin();\r\n            }}\r\n            className={s.login_button}\r\n          >\r\n            Зайти в кабинет\r\n          </button>\r\n        </nav>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\loginRegister\\loginRegistration.js",["95"],"import { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport s from './style.module.css';\r\n\r\nconst LoginRegister = () => {   \r\n    const history = useHistory()\r\n    const [signup, setSignup] = useState(true) \r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [name, setName] = useState('')\r\n\r\n    const handleClick = () => {\r\n        history.push('/')\r\n    }\r\n\r\n    const handleClickSignupIn = () => {\r\n        setEmail(p => {\r\n            return p\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        setEmail('')\r\n        setPassword('')\r\n        setName('')\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className={s.reg}>\r\n                <div className={s.reg_block}>\r\n                    <h3>\r\n                        {signup ? 'Регистрация' : 'Авторизация'}\r\n                    </h3>\r\n                    <p>\r\n                        Больше 70% учеников увеличили свой словарный запас на 2500 слов\r\n                    </p>\r\n                    <form\r\n                        onSubmit={handleSubmit}\r\n                        className={s.reg_form}\r\n                    >\r\n                        <input\r\n                            onChange={(e) => {setEmail(e.target.value)}}\r\n                            value={email}\r\n                            className={s.input} \r\n                            type={'text'} \r\n                            id={'email'} \r\n                            placeholder={'E-mail'} \r\n                            required \r\n                            inputMode={'email'}>\r\n                        </input>\r\n                        {signup ? \r\n                        <input\r\n                            onChange={(e) => {setName(e.target.value)}}\r\n                            value={name}\r\n                            className={s.input} \r\n                            type={'text'} \r\n                            id={'name'}\r\n                            placeholder={'Name'}>\r\n                        </input> : ''}\r\n                        <input\r\n                            onChange={(e) => {setPassword(e.target.value)}}\r\n                            value={password}\r\n                            className={s.input} \r\n                            type={'password'} \r\n                            id={'password'}\r\n                            placeholder={'Password'} \r\n                            required>\r\n                        </input>\r\n                        <div className={s.btn_sign_up_in}>\r\n                            <button \r\n                                className={'blue_button'} \r\n                                type={'submit'}\r\n                            >\r\n                                {signup ? 'Sign up' : 'Sign in'}\r\n                            </button>\r\n                            <div \r\n                                className={s.sign_up_in}\r\n                                onClick={handleClickSignupIn}\r\n                            >\r\n                                {signup ? 'sign in?' : 'sign up?'}\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <button\r\n                    onClick={handleClick}\r\n                    className={`login_button ${s.back_btn}`}\r\n                >\r\n                    Вернуться на главную\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginRegister;","D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\main\\main.js",[],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\notFound\\notFound.js",[],"D:\\Al`k\\Al'k - работа\\projects\\RS LANG\\rslang\\client\\src\\components\\games\\routes\\match\\index.js",["96","97","98","99","100","101","102","103"],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":6,"column":8,"nodeType":"110","messageId":"111","endLine":6,"endColumn":19},{"ruleId":"108","severity":1,"message":"112","line":7,"column":8,"nodeType":"110","messageId":"111","endLine":7,"endColumn":22},{"ruleId":"108","severity":1,"message":"113","line":8,"column":8,"nodeType":"110","messageId":"111","endLine":8,"endColumn":23},{"ruleId":"108","severity":1,"message":"114","line":9,"column":8,"nodeType":"110","messageId":"111","endLine":9,"endColumn":21},{"ruleId":"108","severity":1,"message":"115","line":18,"column":5,"nodeType":"110","messageId":"111","endLine":18,"endColumn":39},{"ruleId":"116","severity":1,"message":"117","line":72,"column":36,"nodeType":"118","messageId":"119","endLine":72,"endColumn":38},{"ruleId":"120","severity":1,"message":"121","line":95,"column":21,"nodeType":"122","endLine":95,"endColumn":57},{"ruleId":"120","severity":1,"message":"121","line":207,"column":21,"nodeType":"122","endLine":207,"endColumn":57},{"ruleId":"120","severity":1,"message":"121","line":298,"column":21,"nodeType":"122","endLine":298,"endColumn":57},{"ruleId":"123","severity":1,"message":"124","line":39,"column":6,"nodeType":"125","endLine":39,"endColumn":46,"suggestions":"126"},{"ruleId":"120","severity":1,"message":"121","line":255,"column":19,"nodeType":"122","endLine":255,"endColumn":55},{"ruleId":"108","severity":1,"message":"127","line":1,"column":10,"nodeType":"110","messageId":"111","endLine":1,"endColumn":18},{"ruleId":"108","severity":1,"message":"128","line":13,"column":12,"nodeType":"110","messageId":"111","endLine":13,"endColumn":21},{"ruleId":"108","severity":1,"message":"129","line":13,"column":23,"nodeType":"110","messageId":"111","endLine":13,"endColumn":35},{"ruleId":"123","severity":1,"message":"130","line":165,"column":8,"nodeType":"125","endLine":165,"endColumn":13,"suggestions":"131"},{"ruleId":"123","severity":1,"message":"132","line":185,"column":8,"nodeType":"125","endLine":185,"endColumn":19,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":41,"column":19,"nodeType":"122","endLine":47,"endColumn":20},{"ruleId":"108","severity":1,"message":"136","line":8,"column":20,"nodeType":"110","messageId":"111","endLine":8,"endColumn":29},{"ruleId":"108","severity":1,"message":"137","line":13,"column":12,"nodeType":"110","messageId":"111","endLine":13,"endColumn":21},{"ruleId":"108","severity":1,"message":"138","line":13,"column":23,"nodeType":"110","messageId":"111","endLine":13,"endColumn":35},{"ruleId":"108","severity":1,"message":"128","line":14,"column":12,"nodeType":"110","messageId":"111","endLine":14,"endColumn":21},{"ruleId":"108","severity":1,"message":"129","line":14,"column":23,"nodeType":"110","messageId":"111","endLine":14,"endColumn":35},{"ruleId":"108","severity":1,"message":"139","line":18,"column":12,"nodeType":"110","messageId":"111","endLine":18,"endColumn":21},{"ruleId":"108","severity":1,"message":"140","line":108,"column":11,"nodeType":"110","messageId":"111","endLine":108,"endColumn":22},{"ruleId":"108","severity":1,"message":"141","line":127,"column":11,"nodeType":"110","messageId":"111","endLine":127,"endColumn":19},{"ruleId":"123","severity":1,"message":"142","line":205,"column":8,"nodeType":"125","endLine":205,"endColumn":10,"suggestions":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'deleteImage' is defined but never used.","Identifier","unusedVar","'leftArrowImage' is defined but never used.","'rightArrowImage' is defined but never used.","'settingsImage' is defined but never used.","'showAddToHardOrDeletedWordsButtons' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'dispatch' and 'getWords'. Either include them or remove the dependency array.","ArrayExpression",["146"],"'useState' is defined but never used.","'gameLevel' is assigned a value but never used.","'setGameLevel' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'findWords', 'lifesLeft', and 'pushWrongWord'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'gameOver'. Either include it or remove the dependency array.",["148"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'setSignup' is assigned a value but never used.","'bothWords' is assigned a value but never used.","'setBothWords' is assigned a value but never used.","'lifesLeft' is assigned a value but never used.","'checkAnswer' is assigned a value but never used.","'gameOver' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'findWords'. Either include it or remove the dependency array.",["149"],"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [currentWordGroupPage, currentWordGroup, getWords, dispatch]",{"range":"158","text":"159"},"Update the dependencies array to be: [findWords, lifesLeft, pushWrongWord, top]",{"range":"160","text":"161"},"Update the dependencies array to be: [gameOver, lifesLeft]",{"range":"162","text":"163"},"Update the dependencies array to be: [findWords]",{"range":"164","text":"165"},[1360,1400],"[currentWordGroupPage, currentWordGroup, getWords, dispatch]",[4450,4455],"[findWords, lifesLeft, pushWrongWord, top]",[5040,5051],"[gameOver, lifesLeft]",[5680,5682],"[findWords]"]