[{"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\index.js":"1","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\App.js":"2","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\loginRegistration.js":"3","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\notFound.js":"4","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\main.js":"5","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\header.js":"6","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\AboutTeam\\AboutTeam.js":"7","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\context\\context.js":"8","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\reducer\\reducer.js":"9","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\Header.js":"10","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\LoginRegistration.js":"11","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\Main.js":"12","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\NotFound.js":"13","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\eBook\\EBook.js":"14","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\dictionary\\Dictionary.js":"15","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\gamesMain.js":"16","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\footer\\footer.js":"17","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\aboutApp\\aboutApp.js":"18","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\routes\\start\\start.js":"19","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\routes\\savanna-g1\\index.js":"20"},{"size":302,"mtime":1617549485761,"results":"21","hashOfConfig":"22"},{"size":1836,"mtime":1617549484678,"results":"23","hashOfConfig":"22"},{"size":1352,"mtime":1617336666502,"results":"24","hashOfConfig":"22"},{"size":532,"mtime":1617336687027,"results":"25","hashOfConfig":"22"},{"size":1556,"mtime":1617336677191,"results":"26","hashOfConfig":"22"},{"size":1688,"mtime":1617457910428,"results":"27","hashOfConfig":"22"},{"size":3483,"mtime":1617549485309,"results":"28","hashOfConfig":"22"},{"size":109,"mtime":1617457910338,"results":"29","hashOfConfig":"22"},{"size":19554,"mtime":1617457910448,"results":"30","hashOfConfig":"22"},{"size":1804,"mtime":1617549485466,"results":"31","hashOfConfig":"22"},{"size":1352,"mtime":1617336666502,"results":"32","hashOfConfig":"22"},{"size":1556,"mtime":1617336677191,"results":"33","hashOfConfig":"22"},{"size":532,"mtime":1617336687027,"results":"34","hashOfConfig":"22"},{"size":14563,"mtime":1617457910403,"results":"35","hashOfConfig":"22"},{"size":15104,"mtime":1617457910368,"results":"36","hashOfConfig":"22"},{"size":635,"mtime":1617549485344,"results":"37","hashOfConfig":"22"},{"size":1935,"mtime":1617549485324,"results":"38","hashOfConfig":"22"},{"size":2693,"mtime":1617549485320,"results":"39","hashOfConfig":"22"},{"size":3668,"mtime":1617549485410,"results":"40","hashOfConfig":"22"},{"size":5180,"mtime":1617549485368,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1i7brp4",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\index.js",[],["87","88"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\App.js",["89"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\loginRegistration.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\notFound.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\main.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\header.js",["90"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\AboutTeam\\AboutTeam.js",["91","92"],"import { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport s from './style.module.css';\r\n\r\nconst AboutTeam = () => {\r\n\r\n    const [authors, setAuthors] = useState([\r\n        {\r\n            id: 1,\r\n            imgStyle: 'alk',\r\n            name: 'Олег Кольцов',\r\n            git: '@AlekRing',\r\n            gitLink: 'url(https://github.com/AlekRing)',\r\n            role: 'done something',\r\n            activated: false,\r\n        },\r\n        {\r\n            id: 2,\r\n            imgStyle: 'dmitry',\r\n            name: 'Дмитрий',\r\n            git: '@git..',\r\n            gitLink: 'github.com/..',\r\n            role: 'done something',\r\n            activated: false,\r\n        },\r\n        {\r\n            id: 3,\r\n            imgStyle: 'oybek',\r\n            name: 'Ойбек',\r\n            git: '@git..',\r\n            gitLink: 'github.com/..',\r\n            role: 'done something',\r\n            activated: false,\r\n        },\r\n        {\r\n            id: 4,\r\n            imgStyle: 'ruslan',\r\n            name: 'Руслан',\r\n            git: '@git..',\r\n            gitLink: 'github.com/..',\r\n            role: 'done something',\r\n            activated: false,\r\n        }\r\n    ])\r\n\r\n    const activateRole = (id) => {\r\n        setAuthors(prevState => {\r\n            return (\r\n                prevState.map(auth => {\r\n                    if (auth.id === id) {\r\n                        auth.activated = !auth.activated\r\n                    }\r\n                    return auth\r\n                })\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.about}>\r\n               <div className={s.bg_blur}>\r\n                    <div className={s.about_logoblock}>\r\n                        <div className={s.eclips}></div>\r\n                        <div className={s.about_title}>О команде</div>\r\n                    </div>\r\n                    <div className={s.cards_block}>\r\n                        {\r\n                            authors.map(auth => {\r\n                                return (\r\n                                    <div key={auth.id} className={s.card}>\r\n                                        <div className={s.img_wrapper}>\r\n                                            <div className={`${s.img} ${s[auth.imgStyle]}`} />\r\n                                        </div>\r\n                                        <div className={s.name}>\r\n                                            {auth.name}\r\n                                        </div>\r\n                                        <div className={s.git}>\r\n                                            <a href={auth.gitLink} target={'_blank'}>{auth.git}</a>\r\n                                        </div>\r\n                                        <button onClick={()=>{activateRole(auth.id)}}\r\n                                            className={s.donat_btn}>\r\n                                            Вклад в проект\r\n                                        </button>\r\n                                        <div className={`${s.role} ${auth.activated ? s.active : s.nope}`}>\r\n                                            {auth.role + auth.id}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n               </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AboutTeam;","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\context\\context.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\reducer\\reducer.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\Header.js",["93"],"import { useHistory } from \"react-router-dom\";\r\n\r\nimport s from \"./style.module.css\";\r\n\r\nconst Header = ({ title, descr }) => {\r\n  const history = useHistory();\r\n\r\n  const handleLogin = () => {\r\n    history.push(\"/registration\");\r\n  };\r\n\r\n  const handleLinkNavigation = (e, link) => {\r\n    e.preventDefault();\r\n\r\n    if (link === links[0]) history.push(\"/\");\r\n    if (link === links[1]) history.push(\"/games\");\r\n    if (link === links[3]) history.push(\"/eBook\");\r\n    if (link === links[6]) history.push(\"/dictionary\");\r\n    if (link === links[5]) history.push(\"/AboutTeam\");\r\n  };\r\n\r\n  const links = [\r\n    \"Главная\",\r\n    \"Мини-игры\",\r\n    \"Статистика\",\r\n    \"Электронный Учебник\",\r\n    \"О приложении\",\r\n    \"О команде\",\r\n    \"Словарь\",\r\n  ];\r\n  return (\r\n    <>\r\n      <header className={s.root}>\r\n        <nav className={s.nav}>\r\n          <ul>\r\n            {links.map((link, id) => {\r\n              return (\r\n                <li key={id} className={s.nav_list}>\r\n                  <a\r\n                    href=\"#\"\r\n                    className={s.nav_links}\r\n                    onClick={(e) => {\r\n                      handleLinkNavigation(e, link);\r\n                    }}\r\n                  >\r\n                    {link}\r\n                  </a>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <button\r\n            onClick={() => {\r\n              handleLogin();\r\n            }}\r\n            className={s.login_button}\r\n          >\r\n            Зайти в кабинет\r\n          </button>\r\n        </nav>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\LoginRegistration.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\Main.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\NotFound.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\eBook\\EBook.js",["94","95"],"import React from \"react\";\r\nimport RSLangContext from \"../context/context\";\r\nimport styles from \"./ebook.module.css\";\r\nimport soundImage from \"../../assets/sound.png\";\r\nimport saveImage from \"../../assets/floppy-disk.png\";\r\nimport deleteImage from \"../../assets/trash.png\";\r\nimport leftArrowImage from \"../../assets/left-arrow.png\";\r\nimport rightArrowImage from \"../../assets/right-arrow.png\";\r\nimport settingsImage from \"../../assets/settings.png\";\r\nimport timesImage from \"../../assets/remove.png\";\r\nimport tickImage from \"../../assets/check.png\";\r\nfunction EBook() {\r\n  const {\r\n    currentWordGroup,\r\n    currentWordGroupPage,\r\n    showWordTranslationAndTranslatedExampleSentence,\r\n    showAddToHardOrDeletedWordsButtons,\r\n    wordsToDisplay,\r\n    showSettings,\r\n    currentSection,\r\n    dispatch,\r\n  } = React.useContext(RSLangContext);\r\n  async function getWords() {\r\n    let response = await fetch(\r\n      `https://react-learnwords-example.herokuapp.com/words?group=${currentWordGroup}&page=${currentWordGroupPage}`\r\n    );\r\n    let data = await response.json();\r\n    return data;\r\n  }\r\n  React.useEffect(() => {\r\n    getWords().then((resp) =>\r\n      dispatch({\r\n        type: \"WORDS_TO_DISPLAY_LOADED\",\r\n        payload: resp.map((word) => {\r\n          return { ...word, isSavedWord: false, isDeletedWord: false };\r\n        }),\r\n      })\r\n    );\r\n  }, [currentWordGroupPage, currentWordGroup]);\r\n  return (\r\n    <div className={styles.eBook}>\r\n      {showSettings ? (\r\n        <div className={styles.settings}>\r\n          <div style={{ position: \"relative\" }}>\r\n            <div className={styles.settingsButton}>\r\n              <button\r\n                style={{\r\n                  width: \"50px\",\r\n                  height: \"40px\",\r\n                  backgroundColor: \"inherit\",\r\n                }}\r\n                onClick={() => {\r\n                  dispatch({ type: \"TOGGLE_SHOW_SETTINGS\" });\r\n                }}\r\n              >\r\n                <img\r\n                  src={settingsImage}\r\n                  alt=\"settings-icon\"\r\n                  style={{ width: \"100%\", height: \"100%\" }}\r\n                />\r\n              </button>\r\n            </div>\r\n            <h1>Настройки</h1>\r\n            <div className={styles.settingsDivButtons}>\r\n              <div className={styles.settingsButton}>\r\n                <button\r\n                  style={{\r\n                    width: \"50px\",\r\n                    height: \"40px\",\r\n                    backgroundColor: \"inherit\",\r\n                  }}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"TOGGLE_SHOW_SETTINGS\" });\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={settingsImage}\r\n                    alt=\"settings-icon\"\r\n                    style={{ width: \"100%\", height: \"100%\" }}\r\n                  />\r\n                </button>\r\n              </div>\r\n              <p>\r\n                {showWordTranslationAndTranslatedExampleSentence\r\n                  ? \"Показывать Перевод Слова и Перевод Предложения Со Словом\"\r\n                  : \"Спрятать Перевод Слова и Перевод Предложения Со Словом\"}\r\n              </p>\r\n              <button\r\n                onClick={() => {\r\n                  dispatch({ type: \"TOGGLE_TRANSLATION_BUTTON\" });\r\n                }}\r\n              >\r\n                <img\r\n                  src={\r\n                    showWordTranslationAndTranslatedExampleSentence\r\n                      ? tickImage\r\n                      : timesImage\r\n                  }\r\n                  alt=\"\"\r\n                />\r\n              </button>\r\n            </div>\r\n            <div className={styles.settingsDivButtons}>\r\n              <p>\r\n                {showAddToHardOrDeletedWordsButtons\r\n                  ? \"Показывать Кнопки 'Добавить в Сложные Слова' и 'Добавить в Удалённые Слова'\"\r\n                  : \"Спрятать Кнопки 'Добавить в Сложные Слова' и 'Добавить в Удалённые Слова'\"}\r\n              </p>\r\n              <button\r\n                onClick={() => {\r\n                  dispatch({ type: \"TOGGLE_ADD_OR_DELETE_BUTTON\" });\r\n                }}\r\n              >\r\n                <img\r\n                  src={\r\n                    showAddToHardOrDeletedWordsButtons ? tickImage : timesImage\r\n                  }\r\n                  alt=\"\"\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div className={styles.wordList}>\r\n        <div className={styles.navigation}>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 0 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 0 });\r\n                  }}\r\n                >\r\n                  Раздел 1\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 1 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 1 });\r\n                  }}\r\n                >\r\n                  Раздел 2\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 2 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 2 });\r\n                  }}\r\n                >\r\n                  Раздел 3\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 3 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 3 });\r\n                  }}\r\n                >\r\n                  Раздел 4\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 4 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 4 });\r\n                  }}\r\n                >\r\n                  Раздел 5\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 5 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 5 });\r\n                  }}\r\n                >\r\n                  Раздел 6\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={() => {\r\n                    dispatch({\r\n                      type: \"TOGGLE_SHOW_SETTINGS\",\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"settings\"\r\n                      ? `${styles.activeButton}`\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  Настройки Э-Книги\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <input\r\n                  type=\"number\"\r\n                  onChange={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_PAGE\",\r\n                      payload: event.target.value,\r\n                    });\r\n                  }}\r\n                  value={currentWordGroupPage + 1}\r\n                  max=\"30\"\r\n                  min=\"1\"\r\n                  style={{\r\n                    border: \"none\",\r\n                    width: \"40px\",\r\n                    ouline: \"0px\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"1.5rem\",\r\n                    position: \"absolute\",\r\n                    top: \"0\",\r\n                    right: \"0\",\r\n                  }}\r\n                />\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n          {wordsToDisplay.length === 0 ? (\r\n            <div style={{ textAlign: \"center\", color: \"#000\" }}>\r\n              <h2>\r\n                Вы переместиле все слова с текущей страницы в \"Удалённые Слова\"\r\n              </h2>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {wordsToDisplay.map((word) => {\r\n            const audio = new Audio(`${word.audio}`);\r\n            const audioExample = new Audio(`${word.audioExample}`);\r\n            const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n            return (\r\n              <div\r\n                className={`${styles.word} ${\r\n                  word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                }`}\r\n                key={word.id}\r\n              >\r\n                <div className={styles.image}>\r\n                  <img src={word.image} alt=\"image\" />\r\n                </div>\r\n                <div className={styles.wordInfo}>\r\n                  <div className={styles.wordInfoFirstRow}>\r\n                    <p className={styles.wordTitle}>{word.word}</p>\r\n                    <p className={styles.wordTranscription}>\r\n                      {word.transcription}\r\n                    </p>\r\n                    <p>\r\n                      <button\r\n                        style={{\r\n                          width: \"30px\",\r\n                          height: \"20px\",\r\n                          backgroundColor: \"inherit\",\r\n                        }}\r\n                        onClick={() => {\r\n                          audio.play();\r\n                          setTimeout(() => {\r\n                            audioMeaning.play();\r\n                          }, audio.duration * 1000 + 500);\r\n                          setTimeout(() => {\r\n                            audioExample.play();\r\n                          }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src={soundImage}\r\n                          alt=\"\"\r\n                          style={{ width: \"100%\", height: \"100%\" }}\r\n                        />\r\n                      </button>\r\n                      {showAddToHardOrDeletedWordsButtons ? (\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"TOGGLE_SAVED_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={saveImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {showAddToHardOrDeletedWordsButtons ? (\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"DELETE_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={deleteImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n                  <p style={{ fontWeight: \"bold\" }}>\r\n                    {showWordTranslationAndTranslatedExampleSentence\r\n                      ? word.wordTranslate\r\n                      : \"\"}\r\n                  </p>\r\n                  <p dangerouslySetInnerHTML={{ __html: word.textMeaning }}></p>\r\n                  {showWordTranslationAndTranslatedExampleSentence ? (\r\n                    <p>{word.textMeaningTranslate}</p>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  <p\r\n                    dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                    style={{ fontStyle: \"italic\" }}\r\n                  ></p>\r\n                  <p>\r\n                    {showWordTranslationAndTranslatedExampleSentence\r\n                      ? word.textExampleTranslate\r\n                      : \"\"}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n          <div className={styles.bottom}>\r\n            <h3>Номер Страницы Слов : {currentWordGroupPage + 1}</h3>\r\n            <button\r\n              style={{\r\n                width: \"40px\",\r\n                height: \"30px\",\r\n                backgroundColor: \"inherit\",\r\n              }}\r\n              onClick={() => {\r\n                dispatch({ type: \"DECREASE_PAGE_NUMBER\" });\r\n              }}\r\n            >\r\n              <img\r\n                src={leftArrowImage}\r\n                alt=\"left-arrow-icon\"\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n              />\r\n            </button>\r\n            <button\r\n              style={{\r\n                width: \"40px\",\r\n                height: \"30px\",\r\n                backgroundColor: \"inherit\",\r\n              }}\r\n              onClick={() => {\r\n                dispatch({ type: \"INCREASE_PAGE_NUMBER\" });\r\n              }}\r\n            >\r\n              <img\r\n                src={rightArrowImage}\r\n                alt=\"right-arrow-icon\"\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n              />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EBook;\r\n","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\dictionary\\Dictionary.js",["96","97","98","99","100","101","102","103","104"],"import React from \"react\";\r\nimport styles from \"./dictionary.module.css\";\r\nimport RSLangContext from \"../context/context\";\r\nimport soundImage from \"../../assets/sound.png\";\r\nimport saveImage from \"../../assets/floppy-disk.png\";\r\nimport deleteImage from \"../../assets/trash.png\";\r\nimport leftArrowImage from \"../../assets/left-arrow.png\";\r\nimport rightArrowImage from \"../../assets/right-arrow.png\";\r\nimport settingsImage from \"../../assets/settings.png\";\r\nimport undoImage from \"../../assets/undo.png\";\r\nfunction Dictionary() {\r\n  const {\r\n    currentSection,\r\n    dispatch,\r\n    savedWords,\r\n    deletedWords,\r\n    learningWords,\r\n    showAddToHardOrDeletedWordsButtons,\r\n    showWordTranslationAndTranslatedExampleSentence,\r\n  } = React.useContext(RSLangContext);\r\n  return (\r\n    <div className={styles.dictionary}>\r\n      <div className={styles.wordList}>\r\n        <div className={styles.navigation}>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"learning_words\"\r\n                      ? styles.activeButton\r\n                      : \"\"\r\n                  }\r\n                  id=\"learning_words\"\r\n                >\r\n                  Изучаемые Слова\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"difficult_words\"\r\n                      ? styles.activeButton\r\n                      : \"\"\r\n                  }\r\n                  id=\"difficult_words\"\r\n                >\r\n                  Сложные Слова\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection == \"deleted_words\" ? styles.activeButton : \"\"\r\n                  }\r\n                  id=\"deleted_words\"\r\n                >\r\n                  Удаленные Слова\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n        {currentSection === \"learning_words\"\r\n          ? learningWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        {!word.isDeletedWord ? (\r\n                          <button\r\n                            style={{\r\n                              width: \"30px\",\r\n                              height: \"20px\",\r\n                              backgroundColor: \"inherit\",\r\n                            }}\r\n                            onClick={() => {\r\n                              dispatch({\r\n                                type: \"TOGGLE_SAVED_WORD\",\r\n                                payload: word.id,\r\n                              });\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src={saveImage}\r\n                              alt=\"\"\r\n                              style={{ width: \"100%\", height: \"100%\" }}\r\n                            />\r\n                          </button>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        <button\r\n                          style={{\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: `${\r\n                                word.isDeletedWord\r\n                                  ? \"RETURN_WORD\"\r\n                                  : \"REMOVE_FROM_LEARNING_WORDS\"\r\n                              }`,\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img src={undoImage} alt=\"\" />\r\n                        </button>\r\n                      </p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : currentSection === \"difficult_words\"\r\n          ? savedWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"TOGGLE_SAVED_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={saveImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                      </p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : currentSection === \"deleted_words\"\r\n          ? deletedWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        <button\r\n                          style={{\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"RETURN_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img src={undoImage} alt=\"\" />\r\n                        </button>\r\n                      </p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dictionary;\r\n","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\gamesMain.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\footer\\footer.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\aboutApp\\aboutApp.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\routes\\start\\start.js",["105"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\routes\\savanna-g1\\index.js",["106","107","108","109","110","111"],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":3,"column":3,"nodeType":"118","messageId":"119","endLine":3,"endColumn":14},{"ruleId":"120","severity":1,"message":"121","line":39,"column":19,"nodeType":"122","endLine":45,"endColumn":20},{"ruleId":"116","severity":1,"message":"123","line":2,"column":10,"nodeType":"118","messageId":"119","endLine":2,"endColumn":20},{"ruleId":"124","severity":1,"message":"125","line":80,"column":45,"nodeType":"122","messageId":"126","endLine":80,"endColumn":86,"fix":"127"},{"ruleId":"120","severity":1,"message":"121","line":39,"column":19,"nodeType":"122","endLine":45,"endColumn":20},{"ruleId":"128","severity":1,"message":"129","line":39,"column":6,"nodeType":"130","endLine":39,"endColumn":46,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":254,"column":19,"nodeType":"122","endLine":254,"endColumn":55},{"ruleId":"116","severity":1,"message":"134","line":6,"column":8,"nodeType":"118","messageId":"119","endLine":6,"endColumn":19},{"ruleId":"116","severity":1,"message":"135","line":7,"column":8,"nodeType":"118","messageId":"119","endLine":7,"endColumn":22},{"ruleId":"116","severity":1,"message":"136","line":8,"column":8,"nodeType":"118","messageId":"119","endLine":8,"endColumn":23},{"ruleId":"116","severity":1,"message":"137","line":9,"column":8,"nodeType":"118","messageId":"119","endLine":9,"endColumn":21},{"ruleId":"116","severity":1,"message":"138","line":18,"column":5,"nodeType":"118","messageId":"119","endLine":18,"endColumn":39},{"ruleId":"139","severity":1,"message":"140","line":72,"column":36,"nodeType":"141","messageId":"142","endLine":72,"endColumn":38},{"ruleId":"132","severity":1,"message":"133","line":95,"column":21,"nodeType":"122","endLine":95,"endColumn":57},{"ruleId":"132","severity":1,"message":"133","line":207,"column":21,"nodeType":"122","endLine":207,"endColumn":57},{"ruleId":"132","severity":1,"message":"133","line":298,"column":21,"nodeType":"122","endLine":298,"endColumn":57},{"ruleId":"116","severity":1,"message":"143","line":1,"column":10,"nodeType":"118","messageId":"119","endLine":1,"endColumn":18},{"ruleId":"116","severity":1,"message":"144","line":3,"column":8,"nodeType":"118","messageId":"119","endLine":3,"endColumn":16},{"ruleId":"116","severity":1,"message":"145","line":12,"column":12,"nodeType":"118","messageId":"119","endLine":12,"endColumn":21},{"ruleId":"116","severity":1,"message":"146","line":12,"column":23,"nodeType":"118","messageId":"119","endLine":12,"endColumn":35},{"ruleId":"128","severity":1,"message":"147","line":118,"column":8,"nodeType":"130","endLine":118,"endColumn":10,"suggestions":"148"},{"ruleId":"128","severity":1,"message":"149","line":130,"column":8,"nodeType":"130","endLine":130,"endColumn":13,"suggestions":"150"},{"ruleId":"128","severity":1,"message":"151","line":137,"column":8,"nodeType":"130","endLine":137,"endColumn":19,"suggestions":"152"},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useHistory' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"155","text":"156"},"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'dispatch' and 'getWords'. Either include them or remove the dependency array.","ArrayExpression",["157"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'deleteImage' is defined but never used.","'leftArrowImage' is defined but never used.","'rightArrowImage' is defined but never used.","'settingsImage' is defined but never used.","'showAddToHardOrDeletedWordsButtons' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'ReactDOM' is defined but never used.","'gameLevel' is assigned a value but never used.","'setGameLevel' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'findWords'. Either include it or remove the dependency array.",["158"],"React Hook useEffect has missing dependencies: 'findWords' and 'lifesLeft'. Either include them or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'gameOver'. Either include it or remove the dependency array.",["160"],"no-global-assign","no-unsafe-negation",[2649,2649]," rel=\"noreferrer\"",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"Update the dependencies array to be: [currentWordGroupPage, currentWordGroup, getWords, dispatch]",{"range":"169","text":"170"},"Update the dependencies array to be: [findWords]",{"range":"171","text":"172"},"Update the dependencies array to be: [findWords, lifesLeft, top]",{"range":"173","text":"174"},"Update the dependencies array to be: [gameOver, lifesLeft]",{"range":"175","text":"176"},[1360,1400],"[currentWordGroupPage, currentWordGroup, getWords, dispatch]",[3282,3284],"[findWords]",[3622,3627],"[findWords, lifesLeft, top]",[3765,3776],"[gameOver, lifesLeft]"]