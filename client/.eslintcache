[{"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\index.js":"1","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\App.js":"2","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\loginRegistration.js":"3","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\notFound.js":"4","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\main.js":"5","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\header.js":"6","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\AboutTeam\\AboutTeam.js":"7","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\context\\context.js":"8","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\reducer\\reducer.js":"9","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\Header.js":"10","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\LoginRegistration.js":"11","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\Main.js":"12","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\NotFound.js":"13","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\eBook\\EBook.js":"14","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\dictionary\\Dictionary.js":"15","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\Games.js":"16"},{"size":267,"mtime":1618421060411,"results":"17","hashOfConfig":"18"},{"size":1627,"mtime":1618421059477,"results":"19","hashOfConfig":"18"},{"size":1352,"mtime":1617336666502,"results":"20","hashOfConfig":"18"},{"size":532,"mtime":1617336687027,"results":"21","hashOfConfig":"18"},{"size":1556,"mtime":1617336677191,"results":"22","hashOfConfig":"18"},{"size":1688,"mtime":1617457910428,"results":"23","hashOfConfig":"18"},{"size":3514,"mtime":1618421148138,"results":"24","hashOfConfig":"18"},{"size":109,"mtime":1617457910338,"results":"25","hashOfConfig":"18"},{"size":19554,"mtime":1618421060309,"results":"26","hashOfConfig":"18"},{"size":1688,"mtime":1618421228425,"results":"27","hashOfConfig":"18"},{"size":1352,"mtime":1617336666502,"results":"28","hashOfConfig":"18"},{"size":1556,"mtime":1617336677191,"results":"29","hashOfConfig":"18"},{"size":532,"mtime":1617336687027,"results":"30","hashOfConfig":"18"},{"size":14563,"mtime":1618421059666,"results":"31","hashOfConfig":"18"},{"size":15104,"mtime":1618421059551,"results":"32","hashOfConfig":"18"},{"size":2694,"mtime":1618421208019,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1i7brp4",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\index.js",[],["70","71"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\App.js",["72"],"import React from \"react\";\r\nimport {\r\n  useLocation,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\nimport AboutTeam from \"./components/AboutTeam/AboutTeam\";\r\nimport Games from \"./components/games/Games\";\r\nimport Header from \"./components/header/Header\";\r\nimport LoginRegister from \"./components/loginRegister/LoginRegistration\";\r\nimport Main from \"./components/main/Main\";\r\nimport NotFound from \"./components/notFound/NotFound\";\r\nimport RSLangContext from \"./components/context/context\";\r\nimport { defaultState, reducer } from \"./components/reducer/reducer\";\r\nimport EBook from \"./components/eBook/EBook\";\r\nimport Dictionary from \"./components/dictionary/Dictionary\";\r\nfunction App() {\r\n  const [state, dispatch] = React.useReducer(reducer, defaultState);\r\n  return (\r\n    <RSLangContext.Provider value={{ ...state, dispatch }}>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/404\" component={NotFound} />\r\n          <Route path=\"/registration\" component={LoginRegister} />\r\n          <Route>\r\n            <Header />\r\n            <Switch>\r\n              <Route path=\"/\" exact component={Main} />\r\n              <Route path=\"/AboutTeam\" component={AboutTeam} />\r\n              <Route path=\"/games\" component={Games} />\r\n              <Route path=\"/eBook\" component={EBook} />\r\n              <Route path=\"/dictionary\" component={Dictionary} />\r\n              <Route render={() => <Redirect to=\"/404\" />} />\r\n            </Switch>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </RSLangContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\loginRegistration.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\notFound.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\main.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\header.js",["73"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\AboutTeam\\AboutTeam.js",["74","75"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\context\\context.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\reducer\\reducer.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\header\\Header.js",["76"],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\loginRegister\\LoginRegistration.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\main\\Main.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\notFound\\NotFound.js",[],"C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\eBook\\EBook.js",["77","78"],"import React from \"react\";\r\nimport RSLangContext from \"../context/context\";\r\nimport styles from \"./ebook.module.css\";\r\nimport soundImage from \"../../assets/sound.png\";\r\nimport saveImage from \"../../assets/floppy-disk.png\";\r\nimport deleteImage from \"../../assets/trash.png\";\r\nimport leftArrowImage from \"../../assets/left-arrow.png\";\r\nimport rightArrowImage from \"../../assets/right-arrow.png\";\r\nimport settingsImage from \"../../assets/settings.png\";\r\nimport timesImage from \"../../assets/remove.png\";\r\nimport tickImage from \"../../assets/check.png\";\r\nfunction EBook() {\r\n  const {\r\n    currentWordGroup,\r\n    currentWordGroupPage,\r\n    showWordTranslationAndTranslatedExampleSentence,\r\n    showAddToHardOrDeletedWordsButtons,\r\n    wordsToDisplay,\r\n    showSettings,\r\n    currentSection,\r\n    dispatch,\r\n  } = React.useContext(RSLangContext);\r\n  async function getWords() {\r\n    let response = await fetch(\r\n      `https://react-learnwords-example.herokuapp.com/words?group=${currentWordGroup}&page=${currentWordGroupPage}`\r\n    );\r\n    let data = await response.json();\r\n    return data;\r\n  }\r\n  React.useEffect(() => {\r\n    getWords().then((resp) =>\r\n      dispatch({\r\n        type: \"WORDS_TO_DISPLAY_LOADED\",\r\n        payload: resp.map((word) => {\r\n          return { ...word, isSavedWord: false, isDeletedWord: false };\r\n        }),\r\n      })\r\n    );\r\n  }, [currentWordGroupPage, currentWordGroup]);\r\n  return (\r\n    <div className={styles.eBook}>\r\n      {showSettings ? (\r\n        <div className={styles.settings}>\r\n          <div style={{ position: \"relative\" }}>\r\n            <div className={styles.settingsButton}>\r\n              <button\r\n                style={{\r\n                  width: \"50px\",\r\n                  height: \"40px\",\r\n                  backgroundColor: \"inherit\",\r\n                }}\r\n                onClick={() => {\r\n                  dispatch({ type: \"TOGGLE_SHOW_SETTINGS\" });\r\n                }}\r\n              >\r\n                <img\r\n                  src={settingsImage}\r\n                  alt=\"settings-icon\"\r\n                  style={{ width: \"100%\", height: \"100%\" }}\r\n                />\r\n              </button>\r\n            </div>\r\n            <h1>Настройки</h1>\r\n            <div className={styles.settingsDivButtons}>\r\n              <div className={styles.settingsButton}>\r\n                <button\r\n                  style={{\r\n                    width: \"50px\",\r\n                    height: \"40px\",\r\n                    backgroundColor: \"inherit\",\r\n                  }}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"TOGGLE_SHOW_SETTINGS\" });\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={settingsImage}\r\n                    alt=\"settings-icon\"\r\n                    style={{ width: \"100%\", height: \"100%\" }}\r\n                  />\r\n                </button>\r\n              </div>\r\n              <p>\r\n                {showWordTranslationAndTranslatedExampleSentence\r\n                  ? \"Показывать Перевод Слова и Перевод Предложения Со Словом\"\r\n                  : \"Спрятать Перевод Слова и Перевод Предложения Со Словом\"}\r\n              </p>\r\n              <button\r\n                onClick={() => {\r\n                  dispatch({ type: \"TOGGLE_TRANSLATION_BUTTON\" });\r\n                }}\r\n              >\r\n                <img\r\n                  src={\r\n                    showWordTranslationAndTranslatedExampleSentence\r\n                      ? tickImage\r\n                      : timesImage\r\n                  }\r\n                  alt=\"\"\r\n                />\r\n              </button>\r\n            </div>\r\n            <div className={styles.settingsDivButtons}>\r\n              <p>\r\n                {showAddToHardOrDeletedWordsButtons\r\n                  ? \"Показывать Кнопки 'Добавить в Сложные Слова' и 'Добавить в Удалённые Слова'\"\r\n                  : \"Спрятать Кнопки 'Добавить в Сложные Слова' и 'Добавить в Удалённые Слова'\"}\r\n              </p>\r\n              <button\r\n                onClick={() => {\r\n                  dispatch({ type: \"TOGGLE_ADD_OR_DELETE_BUTTON\" });\r\n                }}\r\n              >\r\n                <img\r\n                  src={\r\n                    showAddToHardOrDeletedWordsButtons ? tickImage : timesImage\r\n                  }\r\n                  alt=\"\"\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div className={styles.wordList}>\r\n        <div className={styles.navigation}>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 0 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 0 });\r\n                  }}\r\n                >\r\n                  Раздел 1\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 1 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 1 });\r\n                  }}\r\n                >\r\n                  Раздел 2\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 2 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 2 });\r\n                  }}\r\n                >\r\n                  Раздел 3\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 3 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 3 });\r\n                  }}\r\n                >\r\n                  Раздел 4\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 4 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 4 });\r\n                  }}\r\n                >\r\n                  Раздел 5\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  className={currentWordGroup === 5 ? styles.activeButton : \"\"}\r\n                  onClick={() => {\r\n                    dispatch({ type: \"CHANGE_SUBSECTION\", payload: 5 });\r\n                  }}\r\n                >\r\n                  Раздел 6\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={() => {\r\n                    dispatch({\r\n                      type: \"TOGGLE_SHOW_SETTINGS\",\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"settings\"\r\n                      ? `${styles.activeButton}`\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  Настройки Э-Книги\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <input\r\n                  type=\"number\"\r\n                  onChange={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_PAGE\",\r\n                      payload: event.target.value,\r\n                    });\r\n                  }}\r\n                  value={currentWordGroupPage + 1}\r\n                  max=\"30\"\r\n                  min=\"1\"\r\n                  style={{\r\n                    border: \"none\",\r\n                    width: \"40px\",\r\n                    ouline: \"0px\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"1.5rem\",\r\n                    position: \"absolute\",\r\n                    top: \"0\",\r\n                    right: \"0\",\r\n                  }}\r\n                />\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n          {wordsToDisplay.length === 0 ? (\r\n            <div style={{ textAlign: \"center\", color: \"#000\" }}>\r\n              <h2>\r\n                Вы переместиле все слова с текущей страницы в \"Удалённые Слова\"\r\n              </h2>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {wordsToDisplay.map((word) => {\r\n            const audio = new Audio(`${word.audio}`);\r\n            const audioExample = new Audio(`${word.audioExample}`);\r\n            const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n            return (\r\n              <div\r\n                className={`${styles.word} ${\r\n                  word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                }`}\r\n                key={word.id}\r\n              >\r\n                <div className={styles.image}>\r\n                  <img src={word.image} alt=\"image\" />\r\n                </div>\r\n                <div className={styles.wordInfo}>\r\n                  <div className={styles.wordInfoFirstRow}>\r\n                    <p className={styles.wordTitle}>{word.word}</p>\r\n                    <p className={styles.wordTranscription}>\r\n                      {word.transcription}\r\n                    </p>\r\n                    <p>\r\n                      <button\r\n                        style={{\r\n                          width: \"30px\",\r\n                          height: \"20px\",\r\n                          backgroundColor: \"inherit\",\r\n                        }}\r\n                        onClick={() => {\r\n                          audio.play();\r\n                          setTimeout(() => {\r\n                            audioMeaning.play();\r\n                          }, audio.duration * 1000 + 500);\r\n                          setTimeout(() => {\r\n                            audioExample.play();\r\n                          }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src={soundImage}\r\n                          alt=\"\"\r\n                          style={{ width: \"100%\", height: \"100%\" }}\r\n                        />\r\n                      </button>\r\n                      {showAddToHardOrDeletedWordsButtons ? (\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"TOGGLE_SAVED_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={saveImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {showAddToHardOrDeletedWordsButtons ? (\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"DELETE_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={deleteImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </p>\r\n                  </div>\r\n                  <p style={{ fontWeight: \"bold\" }}>\r\n                    {showWordTranslationAndTranslatedExampleSentence\r\n                      ? word.wordTranslate\r\n                      : \"\"}\r\n                  </p>\r\n                  <p dangerouslySetInnerHTML={{ __html: word.textMeaning }}></p>\r\n                  {showWordTranslationAndTranslatedExampleSentence ? (\r\n                    <p>{word.textMeaningTranslate}</p>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  <p\r\n                    dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                    style={{ fontStyle: \"italic\" }}\r\n                  ></p>\r\n                  <p>\r\n                    {showWordTranslationAndTranslatedExampleSentence\r\n                      ? word.textExampleTranslate\r\n                      : \"\"}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n          <div className={styles.bottom}>\r\n            <h3>Номер Страницы Слов : {currentWordGroupPage + 1}</h3>\r\n            <button\r\n              style={{\r\n                width: \"40px\",\r\n                height: \"30px\",\r\n                backgroundColor: \"inherit\",\r\n              }}\r\n              onClick={() => {\r\n                dispatch({ type: \"DECREASE_PAGE_NUMBER\" });\r\n              }}\r\n            >\r\n              <img\r\n                src={leftArrowImage}\r\n                alt=\"left-arrow-icon\"\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n              />\r\n            </button>\r\n            <button\r\n              style={{\r\n                width: \"40px\",\r\n                height: \"30px\",\r\n                backgroundColor: \"inherit\",\r\n              }}\r\n              onClick={() => {\r\n                dispatch({ type: \"INCREASE_PAGE_NUMBER\" });\r\n              }}\r\n            >\r\n              <img\r\n                src={rightArrowImage}\r\n                alt=\"right-arrow-icon\"\r\n                style={{ width: \"100%\", height: \"100%\" }}\r\n              />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EBook;\r\n","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\dictionary\\Dictionary.js",["79","80","81","82","83","84","85","86","87"],"import React from \"react\";\r\nimport styles from \"./dictionary.module.css\";\r\nimport RSLangContext from \"../context/context\";\r\nimport soundImage from \"../../assets/sound.png\";\r\nimport saveImage from \"../../assets/floppy-disk.png\";\r\nimport deleteImage from \"../../assets/trash.png\";\r\nimport leftArrowImage from \"../../assets/left-arrow.png\";\r\nimport rightArrowImage from \"../../assets/right-arrow.png\";\r\nimport settingsImage from \"../../assets/settings.png\";\r\nimport undoImage from \"../../assets/undo.png\";\r\nfunction Dictionary() {\r\n  const {\r\n    currentSection,\r\n    dispatch,\r\n    savedWords,\r\n    deletedWords,\r\n    learningWords,\r\n    showAddToHardOrDeletedWordsButtons,\r\n    showWordTranslationAndTranslatedExampleSentence,\r\n  } = React.useContext(RSLangContext);\r\n  return (\r\n    <div className={styles.dictionary}>\r\n      <div className={styles.wordList}>\r\n        <div className={styles.navigation}>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"learning_words\"\r\n                      ? styles.activeButton\r\n                      : \"\"\r\n                  }\r\n                  id=\"learning_words\"\r\n                >\r\n                  Изучаемые Слова\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection === \"difficult_words\"\r\n                      ? styles.activeButton\r\n                      : \"\"\r\n                  }\r\n                  id=\"difficult_words\"\r\n                >\r\n                  Сложные Слова\r\n                </button>\r\n              </li>\r\n              <li>\r\n                <button\r\n                  onClick={(event) => {\r\n                    dispatch({\r\n                      type: \"CHANGE_SECTION\",\r\n                      payload: event.target.id,\r\n                    });\r\n                  }}\r\n                  className={\r\n                    currentSection == \"deleted_words\" ? styles.activeButton : \"\"\r\n                  }\r\n                  id=\"deleted_words\"\r\n                >\r\n                  Удаленные Слова\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n        {currentSection === \"learning_words\"\r\n          ? learningWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        {!word.isDeletedWord ? (\r\n                          <button\r\n                            style={{\r\n                              width: \"30px\",\r\n                              height: \"20px\",\r\n                              backgroundColor: \"inherit\",\r\n                            }}\r\n                            onClick={() => {\r\n                              dispatch({\r\n                                type: \"TOGGLE_SAVED_WORD\",\r\n                                payload: word.id,\r\n                              });\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src={saveImage}\r\n                              alt=\"\"\r\n                              style={{ width: \"100%\", height: \"100%\" }}\r\n                            />\r\n                          </button>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                        <button\r\n                          style={{\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: `${\r\n                                word.isDeletedWord\r\n                                  ? \"RETURN_WORD\"\r\n                                  : \"REMOVE_FROM_LEARNING_WORDS\"\r\n                              }`,\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img src={undoImage} alt=\"\" />\r\n                        </button>\r\n                      </p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : currentSection === \"difficult_words\"\r\n          ? savedWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"TOGGLE_SAVED_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={saveImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                      </p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : currentSection === \"deleted_words\"\r\n          ? deletedWords.map((word) => {\r\n              const audio = new Audio(`${word.audio}`);\r\n              const audioExample = new Audio(`${word.audioExample}`);\r\n              const audioMeaning = new Audio(`${word.audioMeaning}`);\r\n              return (\r\n                <div\r\n                  className={`${styles.word} ${\r\n                    word.isSavedWord ? `${styles.hardWord}` : \"\"\r\n                  }`}\r\n                  key={word.id}\r\n                >\r\n                  <div className={styles.image}>\r\n                    <img src={word.image} alt=\"image\" />\r\n                  </div>\r\n                  <div className={styles.wordInfo}>\r\n                    <div className={styles.wordInfoFirstRow}>\r\n                      <p className={styles.wordTitle}>{word.word}</p>\r\n                      <p className={styles.wordTranscription}>\r\n                        {word.transcription}\r\n                      </p>\r\n                      <p>\r\n                        <button\r\n                          style={{\r\n                            width: \"30px\",\r\n                            height: \"20px\",\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            audio.play();\r\n                            setTimeout(() => {\r\n                              audioMeaning.play();\r\n                            }, audio.duration * 1000 + 500);\r\n                            setTimeout(() => {\r\n                              audioExample.play();\r\n                            }, audio.duration * 1000 + 1000 + audioMeaning.duration * 1000);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src={soundImage}\r\n                            alt=\"\"\r\n                            style={{ width: \"100%\", height: \"100%\" }}\r\n                          />\r\n                        </button>\r\n                        <button\r\n                          style={{\r\n                            backgroundColor: \"inherit\",\r\n                          }}\r\n                          onClick={() => {\r\n                            dispatch({\r\n                              type: \"RETURN_WORD\",\r\n                              payload: word.id,\r\n                            });\r\n                          }}\r\n                        >\r\n                          <img src={undoImage} alt=\"\" />\r\n                        </button>\r\n                      </p>\r\n                    </div>\r\n                    <p style={{ fontWeight: \"bold\" }}>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.wordTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textMeaning }}\r\n                    ></p>\r\n                    {showWordTranslationAndTranslatedExampleSentence ? (\r\n                      <p>{word.textMeaningTranslate}</p>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: word.textExample }}\r\n                      style={{ fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <p>\r\n                      {showWordTranslationAndTranslatedExampleSentence\r\n                        ? word.textExampleTranslate\r\n                        : \"\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dictionary;\r\n","C:\\Users\\Moonbek\\Desktop\\rs-lang\\rslang\\client\\src\\components\\games\\Games.js",["88","89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":3,"column":3,"nodeType":"96","messageId":"97","endLine":3,"endColumn":14},{"ruleId":"98","severity":1,"message":"99","line":39,"column":19,"nodeType":"100","endLine":45,"endColumn":20},{"ruleId":"94","severity":1,"message":"101","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":80,"column":45,"nodeType":"100","messageId":"104","endLine":80,"endColumn":86,"fix":"105"},{"ruleId":"98","severity":1,"message":"99","line":39,"column":19,"nodeType":"100","endLine":45,"endColumn":20},{"ruleId":"106","severity":1,"message":"107","line":39,"column":6,"nodeType":"108","endLine":39,"endColumn":46,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":254,"column":19,"nodeType":"100","endLine":254,"endColumn":55},{"ruleId":"94","severity":1,"message":"112","line":6,"column":8,"nodeType":"96","messageId":"97","endLine":6,"endColumn":19},{"ruleId":"94","severity":1,"message":"113","line":7,"column":8,"nodeType":"96","messageId":"97","endLine":7,"endColumn":22},{"ruleId":"94","severity":1,"message":"114","line":8,"column":8,"nodeType":"96","messageId":"97","endLine":8,"endColumn":23},{"ruleId":"94","severity":1,"message":"115","line":9,"column":8,"nodeType":"96","messageId":"97","endLine":9,"endColumn":21},{"ruleId":"94","severity":1,"message":"116","line":18,"column":5,"nodeType":"96","messageId":"97","endLine":18,"endColumn":39},{"ruleId":"117","severity":1,"message":"118","line":72,"column":36,"nodeType":"119","messageId":"120","endLine":72,"endColumn":38},{"ruleId":"110","severity":1,"message":"111","line":95,"column":21,"nodeType":"100","endLine":95,"endColumn":57},{"ruleId":"110","severity":1,"message":"111","line":207,"column":21,"nodeType":"100","endLine":207,"endColumn":57},{"ruleId":"110","severity":1,"message":"111","line":298,"column":21,"nodeType":"100","endLine":298,"endColumn":57},{"ruleId":"94","severity":1,"message":"121","line":1,"column":10,"nodeType":"96","messageId":"97","endLine":1,"endColumn":18},{"ruleId":"94","severity":1,"message":"101","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":20},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useHistory' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"124","text":"125"},"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'dispatch' and 'getWords'. Either include them or remove the dependency array.","ArrayExpression",["126"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'deleteImage' is defined but never used.","'leftArrowImage' is defined but never used.","'rightArrowImage' is defined but never used.","'settingsImage' is defined but never used.","'showAddToHardOrDeletedWordsButtons' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",[2649,2649]," rel=\"noreferrer\"",{"desc":"127","fix":"128"},"Update the dependencies array to be: [currentWordGroupPage, currentWordGroup, getWords, dispatch]",{"range":"129","text":"130"},[1360,1400],"[currentWordGroupPage, currentWordGroup, getWords, dispatch]"]